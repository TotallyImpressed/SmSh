
SmSh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000080c  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009dc  080009e4  000109e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080009dc  080009dc  000109dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080009e0  080009e0  000109e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000109e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  080009e4  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  2000001c  080009e4  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000109e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   000017c4  00000000  00000000  00010a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000541  00000000  00000000  000121d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014f  00000000  00000000  00012712  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000158  00000000  00000000  00012868  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  000129c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00000805  00000000  00000000  00012ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00001a40  00000000  00000000  000132c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0004e1b7  00000000  00000000  00014d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00062ebc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000210  00000000  00000000  00062f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      0000003f  00000000  00000000  00063148  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000000 	.word	0x20000000
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080009c4 	.word	0x080009c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000004 	.word	0x20000004
 800020c:	080009c4 	.word	0x080009c4

08000210 <initComRCC>:
#include "init.h"

void initComRCC() {
// General settings to set SYSCLK
	//Reset RCC System
	RCC->CR |= RCC_CR_HSION;
 8000210:	4b2e      	ldr	r3, [pc, #184]	; (80002cc <initComRCC+0xbc>)
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	f042 0201 	orr.w	r2, r2, #1
 8000218:	601a      	str	r2, [r3, #0]
	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
	RCC->CFGR &= (uint32_t)0xF8FF0000;
 800021a:	6859      	ldr	r1, [r3, #4]
 800021c:	4a2c      	ldr	r2, [pc, #176]	; (80002d0 <initComRCC+0xc0>)
 800021e:	400a      	ands	r2, r1
 8000220:	605a      	str	r2, [r3, #4]
	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000228:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800022c:	601a      	str	r2, [r3, #0]
	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
	RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800022e:	685a      	ldr	r2, [r3, #4]
 8000230:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000234:	605a      	str	r2, [r3, #4]
	//Set PLL multiplication
	RCC->CFGR |= RCC_CFGR_PLLMULL_2;
 8000236:	685a      	ldr	r2, [r3, #4]
 8000238:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800023c:	605a      	str	r2, [r3, #4]
	/* Set CFGR2 register - HSE divider*/
	RCC->CFGR2 |= 0x00000000; // PLL is divided by 2
 800023e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000240:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->CFGR |= RCC_CFGR_MCO_2; // SYSCLK as an output on PA8
 8000242:	685a      	ldr	r2, [r3, #4]
 8000244:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000248:	605a      	str	r2, [r3, #4]
//	RCC->CFGR |= RCC_CFGR_MCO; // PLL/2 as an output on PA8
	// Set HSE through PLL as a SYSCLKstm32
	RCC->CFGR |= RCC_CFGR_SW_1; // SYSCLK is fed by PLL
 800024a:	685a      	ldr	r2, [r3, #4]
 800024c:	f042 0202 	orr.w	r2, r2, #2
 8000250:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_PLLSRC_PREDIV1; // PLL is fed by HSE after PREDIV
 8000252:	685a      	ldr	r2, [r3, #4]
 8000254:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000258:	605a      	str	r2, [r3, #4]
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV8;
 800025a:	685a      	ldr	r2, [r3, #4]
 800025c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000260:	605a      	str	r2, [r3, #4]

//	RCC->CFGR |= RCC_CFGR_APB2
	// Enable HSE and then PLL
	RCC->CR |= RCC_CR_HSEON; // 24MHz HSE ON
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000268:	601a      	str	r2, [r3, #0]
	RCC->CR |= RCC_CR_PLLON; // PLL ON
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000270:	601a      	str	r2, [r3, #0]

// Enable clocking of peripheral
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000272:	699a      	ldr	r2, [r3, #24]
 8000274:	f042 0201 	orr.w	r2, r2, #1
 8000278:	619a      	str	r2, [r3, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // GPIO A port
 800027a:	699a      	ldr	r2, [r3, #24]
 800027c:	f042 0204 	orr.w	r2, r2, #4
 8000280:	619a      	str	r2, [r3, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN; // GPIO B port
 8000282:	699a      	ldr	r2, [r3, #24]
 8000284:	f042 0208 	orr.w	r2, r2, #8
 8000288:	619a      	str	r2, [r3, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN; // GPIO C port
 800028a:	699a      	ldr	r2, [r3, #24]
 800028c:	f042 0210 	orr.w	r2, r2, #16
 8000290:	619a      	str	r2, [r3, #24]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN; // ADC1
 8000292:	699a      	ldr	r2, [r3, #24]
 8000294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000298:	619a      	str	r2, [r3, #24]
	// Deinitialization of TIM15
	RCC->APB2RSTR |= RCC_APB2ENR_TIM15EN;
 800029a:	68da      	ldr	r2, [r3, #12]
 800029c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80002a0:	60da      	str	r2, [r3, #12]
	RCC->APB2RSTR &= ~RCC_APB2ENR_TIM15EN;
 80002a2:	68da      	ldr	r2, [r3, #12]
 80002a4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80002a8:	60da      	str	r2, [r3, #12]
	RCC->APB2ENR |= RCC_APB2ENR_TIM15EN; // TIM15
 80002aa:	699a      	ldr	r2, [r3, #24]
 80002ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80002b0:	619a      	str	r2, [r3, #24]

	RCC->APB1RSTR |= RCC_APB1ENR_TIM3EN;
 80002b2:	691a      	ldr	r2, [r3, #16]
 80002b4:	f042 0202 	orr.w	r2, r2, #2
 80002b8:	611a      	str	r2, [r3, #16]
	RCC->APB1RSTR &= ~RCC_APB1ENR_TIM3EN;
 80002ba:	691a      	ldr	r2, [r3, #16]
 80002bc:	f022 0202 	bic.w	r2, r2, #2
 80002c0:	611a      	str	r2, [r3, #16]
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; // TIM15
 80002c2:	69da      	ldr	r2, [r3, #28]
 80002c4:	f042 0202 	orr.w	r2, r2, #2
 80002c8:	61da      	str	r2, [r3, #28]
 80002ca:	4770      	bx	lr
 80002cc:	40021000 	.word	0x40021000
 80002d0:	f8ff0000 	.word	0xf8ff0000

080002d4 <initGPIO>:
}

void initGPIO() {
// Port A
	GPIOA->CRH |= GPIO_CRH_MODE8; // Set PA8 pin speed to 50 MHz
 80002d4:	4b41      	ldr	r3, [pc, #260]	; (80003dc <initGPIO+0x108>)
 80002d6:	685a      	ldr	r2, [r3, #4]
 80002d8:	f042 0203 	orr.w	r2, r2, #3
 80002dc:	605a      	str	r2, [r3, #4]
	// Set PA8 pin as AF output push-pull for MCO
	GPIOA->CRH &= ~GPIO_CRH_CNF8;
 80002de:	685a      	ldr	r2, [r3, #4]
 80002e0:	f022 020c 	bic.w	r2, r2, #12
 80002e4:	605a      	str	r2, [r3, #4]
	GPIOA->CRH |= GPIO_CRH_CNF8_1;
 80002e6:	685a      	ldr	r2, [r3, #4]
 80002e8:	f042 0208 	orr.w	r2, r2, #8
 80002ec:	605a      	str	r2, [r3, #4]

	GPIOA->CRL |= GPIO_CRL_MODE2; // Set PA2 pin speed to 50 MHz
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80002f4:	601a      	str	r2, [r3, #0]
	// Set PA2 pin as AF output push-pull for TIM15
	GPIOA->CRL &= ~GPIO_CRL_CNF2;
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80002fc:	601a      	str	r2, [r3, #0]
	GPIOA->CRL |= GPIO_CRL_CNF2_1;
 80002fe:	681a      	ldr	r2, [r3, #0]
 8000300:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000304:	601a      	str	r2, [r3, #0]

	GPIOA->CRL |= GPIO_CRL_MODE3; // Set PA3 pin speed to 50 MHz
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800030c:	601a      	str	r2, [r3, #0]
	// Set PA3 pin as AF output push-pull for TIM15
	GPIOA->CRL &= ~GPIO_CRL_CNF3;
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000314:	601a      	str	r2, [r3, #0]
	GPIOA->CRL |= GPIO_CRL_CNF3_1;
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800031c:	601a      	str	r2, [r3, #0]

	GPIOA->CRL |= GPIO_CRL_MODE6; // Set PA6 pin speed to 50 MHz
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8000324:	601a      	str	r2, [r3, #0]
	// Set PA6 pin as AF output push-pull for TIM3
	GPIOA->CRL &= ~GPIO_CRL_CNF6;
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800032c:	601a      	str	r2, [r3, #0]
	GPIOA->CRL |= GPIO_CRL_CNF6_1;
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8000334:	601a      	str	r2, [r3, #0]

	GPIOA->CRL |= GPIO_CRL_MODE7; // Set PA7 pin speed to 50 MHz
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800033c:	601a      	str	r2, [r3, #0]
	// Set PA7 pin as AF output push-pull for TIM3
	GPIOA->CRL &= ~GPIO_CRL_CNF7;
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8000344:	601a      	str	r2, [r3, #0]
	GPIOA->CRL |= GPIO_CRL_CNF7_1;
 8000346:	681a      	ldr	r2, [r3, #0]
 8000348:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800034c:	601a      	str	r2, [r3, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE0; // Set PA0 pin as input
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	f022 0203 	bic.w	r2, r2, #3
 8000354:	601a      	str	r2, [r3, #0]
	// Set PA0 pin to input with pull-up/pull-down
	GPIOA->CRL &= ~GPIO_CRL_CNF0;
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	f022 020c 	bic.w	r2, r2, #12
 800035c:	601a      	str	r2, [r3, #0]
	GPIOA->CRL |= GPIO_CRL_CNF0_1;
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	f042 0208 	orr.w	r2, r2, #8
 8000364:	601a      	str	r2, [r3, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE1; // Set PB3 pin as input
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800036c:	601a      	str	r2, [r3, #0]
	// Set PB3 pin to input with pull-up/pull-down
	GPIOA->CRL &= ~GPIO_CRL_CNF1;
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000374:	601a      	str	r2, [r3, #0]
	GPIOA->CRL |= GPIO_CRL_CNF1_1;
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800037c:	601a      	str	r2, [r3, #0]

//Port B
	GPIOB->CRL &= ~GPIO_CRL_MODE4; // Set PB4 pin as input
 800037e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000388:	601a      	str	r2, [r3, #0]
	// Set PB4 pin to input with pull-up/pull-down
	GPIOB->CRL &= ~GPIO_CRL_CNF4;
 800038a:	681a      	ldr	r2, [r3, #0]
 800038c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8000390:	601a      	str	r2, [r3, #0]
	GPIOB->CRL |= GPIO_CRL_CNF4_1;
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000398:	601a      	str	r2, [r3, #0]

//Port C
	GPIOC->CRL &= ~GPIO_CRL_MODE0; // Set PC0 pin as input for ADC
 800039a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	f022 0203 	bic.w	r2, r2, #3
 80003a4:	601a      	str	r2, [r3, #0]
	// Set PC0 pin to analog input
	GPIOC->CRL &= ~GPIO_CRL_CNF0;
 80003a6:	681a      	ldr	r2, [r3, #0]
 80003a8:	f022 020c 	bic.w	r2, r2, #12
 80003ac:	601a      	str	r2, [r3, #0]
//	GPIOC->CRL |= GPIO_CRL_CNF0;

	GPIOC->CRH &= ~GPIO_CRH_MODE9; // Set PC9 pin as output
 80003ae:	685a      	ldr	r2, [r3, #4]
 80003b0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80003b4:	605a      	str	r2, [r3, #4]
	GPIOC->CRH |= GPIO_CRH_MODE9_1; // Output speed - 2MHz
 80003b6:	685a      	ldr	r2, [r3, #4]
 80003b8:	f042 0220 	orr.w	r2, r2, #32
 80003bc:	605a      	str	r2, [r3, #4]
	GPIOC->CRH &= ~GPIO_CRH_CNF9;	// General purpose push-pull
 80003be:	685a      	ldr	r2, [r3, #4]
 80003c0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80003c4:	605a      	str	r2, [r3, #4]

// EXTI0 line is fed by PA
	AFIO->EXTICR[0] |= AFIO_EXTICR1_EXTI0_PA;
 80003c6:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 80003ca:	689a      	ldr	r2, [r3, #8]
 80003cc:	609a      	str	r2, [r3, #8]
// EXTI1 line is fed by PA
	AFIO->EXTICR[0] |= AFIO_EXTICR1_EXTI1_PA;
 80003ce:	689a      	ldr	r2, [r3, #8]
 80003d0:	609a      	str	r2, [r3, #8]
// EXTI2 line is fed by PB
	AFIO->EXTICR[1] |= AFIO_EXTICR2_EXTI4_PB;
 80003d2:	68da      	ldr	r2, [r3, #12]
 80003d4:	f042 0201 	orr.w	r2, r2, #1
 80003d8:	60da      	str	r2, [r3, #12]
 80003da:	4770      	bx	lr
 80003dc:	40010800 	.word	0x40010800

080003e0 <initTIM3>:
// General settings to set TimeBase parameters
	// Set TIM3 as a master
//	TIM3->CR2 &= ~TIM_CR2_MMS;
//	TIM3->CR2 |= TIM_CR2_MMS_1;
//	TIM15->CR1 |= TIM_CR1_DIR; // Upcount mode
	TIM3->BDTR |= TIM_BDTR_MOE;
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <initTIM3+0xd8>)
 80003e2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80003e6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80003ea:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80003ee:	b292      	uxth	r2, r2
 80003f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	TIM3->ARR = 0xFFFF; 	   // TIM15 auto reload register is set to 65535
 80003f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80003f8:	8599      	strh	r1, [r3, #44]	; 0x2c
	TIM3->PSC = 0x4;
 80003fa:	2204      	movs	r2, #4
 80003fc:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM3->RCR = 0;
 80003fe:	2200      	movs	r2, #0
 8000400:	861a      	strh	r2, [r3, #48]	; 0x30
	// Enable TIM3
//	TIM3->CR1 |= TIM_CR1_CEN;
//Channel 1
	TIM3->CCER &= ~TIM_CCER_CC1E; // Disable channel 1
 8000402:	8c1a      	ldrh	r2, [r3, #32]
 8000404:	b292      	uxth	r2, r2
 8000406:	f022 0201 	bic.w	r2, r2, #1
 800040a:	b292      	uxth	r2, r2
 800040c:	841a      	strh	r2, [r3, #32]
	/* Reset the Output Compare Mode Bits */
	TIM3->CCMR1 &=	~TIM_CCMR1_OC1M;
 800040e:	8b1a      	ldrh	r2, [r3, #24]
 8000410:	b292      	uxth	r2, r2
 8000412:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000416:	b292      	uxth	r2, r2
 8000418:	831a      	strh	r2, [r3, #24]
	TIM3->CCMR1 &=	~TIM_CCMR1_CC1S;
 800041a:	8b1a      	ldrh	r2, [r3, #24]
 800041c:	b292      	uxth	r2, r2
 800041e:	f022 0203 	bic.w	r2, r2, #3
 8000422:	b292      	uxth	r2, r2
 8000424:	831a      	strh	r2, [r3, #24]
	TIM3->CCER &= ~TIM_CCER_CC1E;
 8000426:	8c1a      	ldrh	r2, [r3, #32]
 8000428:	b292      	uxth	r2, r2
 800042a:	f022 0201 	bic.w	r2, r2, #1
 800042e:	b292      	uxth	r2, r2
 8000430:	841a      	strh	r2, [r3, #32]
	TIM3->CCER &= ~TIM_CCER_CC1NP;
 8000432:	8c1a      	ldrh	r2, [r3, #32]
 8000434:	b292      	uxth	r2, r2
 8000436:	f022 0208 	bic.w	r2, r2, #8
 800043a:	b292      	uxth	r2, r2
 800043c:	841a      	strh	r2, [r3, #32]

	TIM3->CCMR1 |= TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_1; // Set output compare toggle mode
 800043e:	8b1a      	ldrh	r2, [r3, #24]
 8000440:	b292      	uxth	r2, r2
 8000442:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000446:	831a      	strh	r2, [r3, #24]
//	TIM3->CCER &= ~TIM_CCER_CC1P; // Set high polarity
//	TIM3->CCER |= TIM_CCER_CC1E; // Output state channel 1 enable

	TIM3->CCR1 |= TIM_CCR1_CCR1; // Set 90 deg shift
 8000448:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800044a:	8699      	strh	r1, [r3, #52]	; 0x34
	TIM3->CCMR1 |= TIM_CCMR1_OC1PE; // Enable preload register
 800044c:	8b1a      	ldrh	r2, [r3, #24]
 800044e:	b292      	uxth	r2, r2
 8000450:	f042 0208 	orr.w	r2, r2, #8
 8000454:	831a      	strh	r2, [r3, #24]

// Channel 2
	TIM3->CCER &= ~TIM_CCER_CC2E; // Disable channel 2
 8000456:	8c1a      	ldrh	r2, [r3, #32]
 8000458:	b292      	uxth	r2, r2
 800045a:	f022 0210 	bic.w	r2, r2, #16
 800045e:	b292      	uxth	r2, r2
 8000460:	841a      	strh	r2, [r3, #32]
	/* Reset the Output Compare Mode Bits */
	TIM3->CCMR1 &=	~TIM_CCMR1_OC2M;
 8000462:	8b1a      	ldrh	r2, [r3, #24]
 8000464:	b292      	uxth	r2, r2
 8000466:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800046a:	b292      	uxth	r2, r2
 800046c:	831a      	strh	r2, [r3, #24]
	TIM3->CCMR1 &=	~TIM_CCMR1_CC2S;
 800046e:	8b1a      	ldrh	r2, [r3, #24]
 8000470:	b292      	uxth	r2, r2
 8000472:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000476:	b292      	uxth	r2, r2
 8000478:	831a      	strh	r2, [r3, #24]
	TIM3->CCER &= ~TIM_CCER_CC2E;
 800047a:	8c1a      	ldrh	r2, [r3, #32]
 800047c:	b292      	uxth	r2, r2
 800047e:	f022 0210 	bic.w	r2, r2, #16
 8000482:	b292      	uxth	r2, r2
 8000484:	841a      	strh	r2, [r3, #32]
	TIM3->CCER &= ~TIM_CCER_CC2NP;
 8000486:	8c1a      	ldrh	r2, [r3, #32]
 8000488:	b292      	uxth	r2, r2
 800048a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800048e:	b292      	uxth	r2, r2
 8000490:	841a      	strh	r2, [r3, #32]

	TIM3->CCMR1 |= TIM_CCMR1_OC2M_0 | TIM_CCMR1_OC2M_1; // Set output compare toggle mode
 8000492:	8b1a      	ldrh	r2, [r3, #24]
 8000494:	b292      	uxth	r2, r2
 8000496:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 800049a:	831a      	strh	r2, [r3, #24]
//	TIM3->CCER |= TIM_CCER_CC2P; // Set low polarity
//	TIM3->CCER |= TIM_CCER_CC2E; // Output state channel 2 enable

	TIM3->CCR2 |= TIM_CCR1_CCR1/2; // Set 45 deg shift
 800049c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 800049e:	b292      	uxth	r2, r2
 80004a0:	ea6f 32d2 	mvn.w	r2, r2, lsr #15
 80004a4:	ea6f 32c2 	mvn.w	r2, r2, lsl #15
 80004a8:	871a      	strh	r2, [r3, #56]	; 0x38
	TIM3->CCMR1 |= TIM_CCMR1_OC2PE; // Enable preload register
 80004aa:	8b1a      	ldrh	r2, [r3, #24]
 80004ac:	b292      	uxth	r2, r2
 80004ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80004b2:	831a      	strh	r2, [r3, #24]
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40000400 	.word	0x40000400

080004bc <initTIM15>:
//	TIM15->SMCR &= ~TIM_SMCR_TS;
	// Configure a trigger mode - counter starts at a rising edge of TRIGI
//	TIM15->SMCR &= ~TIM_SMCR_SMS;
//	TIM15->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
//	TIM15->CR1 |= TIM_CR1_DIR; // Upcount mode
	TIM15->BDTR |= TIM_BDTR_MOE;
 80004bc:	4b3a      	ldr	r3, [pc, #232]	; (80005a8 <initTIM15+0xec>)
 80004be:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80004c2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80004c6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80004ca:	b292      	uxth	r2, r2
 80004cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	TIM15->ARR = 0xFFFF; 	   // TIM15 auto reload register is set to 65535
 80004d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004d4:	8599      	strh	r1, [r3, #44]	; 0x2c
	TIM15->PSC = 0x4;
 80004d6:	2204      	movs	r2, #4
 80004d8:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM15->RCR = 0;
 80004da:	2200      	movs	r2, #0
 80004dc:	861a      	strh	r2, [r3, #48]	; 0x30

	// Enable TIM15
//	TIM15->CR1 |= TIM_CR1_CEN;
	// PWM settings
//Channel 1
	TIM15->CCER &= ~TIM_CCER_CC1E; // Disable channel 1
 80004de:	8c1a      	ldrh	r2, [r3, #32]
 80004e0:	b292      	uxth	r2, r2
 80004e2:	f022 0201 	bic.w	r2, r2, #1
 80004e6:	b292      	uxth	r2, r2
 80004e8:	841a      	strh	r2, [r3, #32]
	/* Reset the Output Compare Mode Bits */
	TIM15->CCMR1 &=	~TIM_CCMR1_OC1M;
 80004ea:	8b1a      	ldrh	r2, [r3, #24]
 80004ec:	b292      	uxth	r2, r2
 80004ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80004f2:	b292      	uxth	r2, r2
 80004f4:	831a      	strh	r2, [r3, #24]
	TIM15->CCMR1 &=	~TIM_CCMR1_CC1S;
 80004f6:	8b1a      	ldrh	r2, [r3, #24]
 80004f8:	b292      	uxth	r2, r2
 80004fa:	f022 0203 	bic.w	r2, r2, #3
 80004fe:	b292      	uxth	r2, r2
 8000500:	831a      	strh	r2, [r3, #24]
	TIM15->CCER &= ~TIM_CCER_CC1E;
 8000502:	8c1a      	ldrh	r2, [r3, #32]
 8000504:	b292      	uxth	r2, r2
 8000506:	f022 0201 	bic.w	r2, r2, #1
 800050a:	b292      	uxth	r2, r2
 800050c:	841a      	strh	r2, [r3, #32]
	TIM15->CCER &= ~TIM_CCER_CC1NP;
 800050e:	8c1a      	ldrh	r2, [r3, #32]
 8000510:	b292      	uxth	r2, r2
 8000512:	f022 0208 	bic.w	r2, r2, #8
 8000516:	b292      	uxth	r2, r2
 8000518:	841a      	strh	r2, [r3, #32]

	TIM15->CCMR1 |= TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_1; // Set output compare toggle mode
 800051a:	8b1a      	ldrh	r2, [r3, #24]
 800051c:	b292      	uxth	r2, r2
 800051e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8000522:	831a      	strh	r2, [r3, #24]
	TIM15->CCER |= TIM_CCER_CC1P; // Set low polarity
 8000524:	8c1a      	ldrh	r2, [r3, #32]
 8000526:	b292      	uxth	r2, r2
 8000528:	f042 0202 	orr.w	r2, r2, #2
 800052c:	841a      	strh	r2, [r3, #32]
//	TIM15->CCER |= TIM_CCER_CC1E; // Output state channel 1 enable

	TIM15->CCR1 |= TIM_CCR1_CCR1; // Set duty cycle to 50%
 800052e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8000530:	8699      	strh	r1, [r3, #52]	; 0x34
	TIM15->CCMR1 |= TIM_CCMR1_OC1PE; // Enable preload register
 8000532:	8b1a      	ldrh	r2, [r3, #24]
 8000534:	b292      	uxth	r2, r2
 8000536:	f042 0208 	orr.w	r2, r2, #8
 800053a:	831a      	strh	r2, [r3, #24]

// Channel 2
	TIM15->CCER &= ~TIM_CCER_CC2E; // Disable channel 2
 800053c:	8c1a      	ldrh	r2, [r3, #32]
 800053e:	b292      	uxth	r2, r2
 8000540:	f022 0210 	bic.w	r2, r2, #16
 8000544:	b292      	uxth	r2, r2
 8000546:	841a      	strh	r2, [r3, #32]
	/* Reset the Output Compare Mode Bits */
	TIM15->CCMR1 &=	~TIM_CCMR1_OC2M;
 8000548:	8b1a      	ldrh	r2, [r3, #24]
 800054a:	b292      	uxth	r2, r2
 800054c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000550:	b292      	uxth	r2, r2
 8000552:	831a      	strh	r2, [r3, #24]
	TIM15->CCMR1 &=	~TIM_CCMR1_CC2S;
 8000554:	8b1a      	ldrh	r2, [r3, #24]
 8000556:	b292      	uxth	r2, r2
 8000558:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800055c:	b292      	uxth	r2, r2
 800055e:	831a      	strh	r2, [r3, #24]
	TIM15->CCER &= ~TIM_CCER_CC2E;
 8000560:	8c1a      	ldrh	r2, [r3, #32]
 8000562:	b292      	uxth	r2, r2
 8000564:	f022 0210 	bic.w	r2, r2, #16
 8000568:	b292      	uxth	r2, r2
 800056a:	841a      	strh	r2, [r3, #32]
	TIM15->CCER &= ~TIM_CCER_CC2NP;
 800056c:	8c1a      	ldrh	r2, [r3, #32]
 800056e:	b292      	uxth	r2, r2
 8000570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000574:	b292      	uxth	r2, r2
 8000576:	841a      	strh	r2, [r3, #32]

	TIM15->CCMR1 |= TIM_CCMR1_OC2M_0 | TIM_CCMR1_OC2M_1; // Set output compare toggle mode
 8000578:	8b1a      	ldrh	r2, [r3, #24]
 800057a:	b292      	uxth	r2, r2
 800057c:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8000580:	831a      	strh	r2, [r3, #24]
	TIM15->CCER &= ~TIM_CCER_CC2P; // Set high polarity
 8000582:	8c1a      	ldrh	r2, [r3, #32]
 8000584:	b292      	uxth	r2, r2
 8000586:	f022 0220 	bic.w	r2, r2, #32
 800058a:	b292      	uxth	r2, r2
 800058c:	841a      	strh	r2, [r3, #32]
//	TIM15->CCER |= TIM_CCER_CC2E; // Output state channel 2 enable

	TIM15->CCR2 |= TIM_CCR1_CCR1/2; // Set duty cycle to 50%
 800058e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8000590:	b292      	uxth	r2, r2
 8000592:	ea6f 32d2 	mvn.w	r2, r2, lsr #15
 8000596:	ea6f 32c2 	mvn.w	r2, r2, lsl #15
 800059a:	871a      	strh	r2, [r3, #56]	; 0x38
	TIM15->CCMR1 |= TIM_CCMR1_OC2PE; // Enable preload register
 800059c:	8b1a      	ldrh	r2, [r3, #24]
 800059e:	b292      	uxth	r2, r2
 80005a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80005a4:	831a      	strh	r2, [r3, #24]
 80005a6:	4770      	bx	lr
 80005a8:	40014000 	.word	0x40014000

080005ac <initADC1>:
}

void initADC1() {

	ADC1->SMPR1 = ADC_SMPR1_SMP10;
 80005ac:	4b17      	ldr	r3, [pc, #92]	; (800060c <initADC1+0x60>)
 80005ae:	2207      	movs	r2, #7
 80005b0:	60da      	str	r2, [r3, #12]

	ADC1->CR1 |= ADC_CR1_AWDCH_1 | ADC_CR1_AWDCH_3;
 80005b2:	685a      	ldr	r2, [r3, #4]
 80005b4:	f042 020a 	orr.w	r2, r2, #10
 80005b8:	605a      	str	r2, [r3, #4]
	ADC1->CR1 |= ADC_CR1_AWDEN;
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80005c0:	605a      	str	r2, [r3, #4]
	ADC1->CR1 |= ADC_CR1_AWDIE;
 80005c2:	685a      	ldr	r2, [r3, #4]
 80005c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005c8:	605a      	str	r2, [r3, #4]

	// Set thresholds values for watchdog
	ADC1->HTR = 2200; // Current - ADC samples ratio = ~ 1.78
 80005ca:	f640 0298 	movw	r2, #2200	; 0x898
 80005ce:	625a      	str	r2, [r3, #36]	; 0x24
	ADC1->LTR = 0;
 80005d0:	2200      	movs	r2, #0
 80005d2:	629a      	str	r2, [r3, #40]	; 0x28

	ADC1->CR2 |= ADC_CR2_ADON;
 80005d4:	689a      	ldr	r2, [r3, #8]
 80005d6:	f042 0201 	orr.w	r2, r2, #1
 80005da:	609a      	str	r2, [r3, #8]
	// Calibration
	ADC1->CR2 |= ADC_CR2_CAL;
 80005dc:	689a      	ldr	r2, [r3, #8]
 80005de:	f042 0204 	orr.w	r2, r2, #4
 80005e2:	609a      	str	r2, [r3, #8]
	while(ADC1->CR2 & ADC_CR2_CAL) {
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <initADC1+0x60>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	f013 0f04 	tst.w	r3, #4
 80005ec:	d1fa      	bne.n	80005e4 <initADC1+0x38>
		__NOP; // waiting for end of calibration
	}

	ADC1->SQR3 = 10;
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <initADC1+0x60>)
 80005f0:	220a      	movs	r2, #10
 80005f2:	635a      	str	r2, [r3, #52]	; 0x34
	// Start conversion
	ADC1->CR2 |= ADC_CR2_EXTSEL | ADC_CR2_EXTTRIG | ADC_CR2_CONT;
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	f442 12f0 	orr.w	r2, r2, #1966080	; 0x1e0000
 80005fa:	f042 0202 	orr.w	r2, r2, #2
 80005fe:	609a      	str	r2, [r3, #8]
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8000600:	689a      	ldr	r2, [r3, #8]
 8000602:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40012400 	.word	0x40012400

08000610 <initIRPT>:

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <initIRPT+0x4c>)
 8000612:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	2340      	movs	r3, #64	; 0x40
 800061a:	6013      	str	r3, [r2, #0]
void initIRPT() {
	// Enable NVIC interrupt for ADC1
	NVIC_EnableIRQ(ADC1_IRQn);
	// Enable NVIC interrupt for EXTI0
	NVIC_EnableIRQ(EXTI0_IRQn);
	EXTI->IMR |= EXTI_IMR_MR0;
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <initIRPT+0x50>)
 800061e:	6819      	ldr	r1, [r3, #0]
 8000620:	f041 0101 	orr.w	r1, r1, #1
 8000624:	6019      	str	r1, [r3, #0]
	EXTI->FTSR |= EXTI_FTSR_TR0;
 8000626:	68d9      	ldr	r1, [r3, #12]
 8000628:	f041 0101 	orr.w	r1, r1, #1
 800062c:	60d9      	str	r1, [r3, #12]
 800062e:	2180      	movs	r1, #128	; 0x80
 8000630:	6011      	str	r1, [r2, #0]
	// Enable NVIC interrupt for EXTI1
	NVIC_EnableIRQ(EXTI1_IRQn);
	EXTI->IMR |= EXTI_IMR_MR1;
 8000632:	6819      	ldr	r1, [r3, #0]
 8000634:	f041 0102 	orr.w	r1, r1, #2
 8000638:	6019      	str	r1, [r3, #0]
	EXTI->FTSR |= EXTI_FTSR_TR1;
 800063a:	68d9      	ldr	r1, [r3, #12]
 800063c:	f041 0102 	orr.w	r1, r1, #2
 8000640:	60d9      	str	r1, [r3, #12]
 8000642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000646:	6011      	str	r1, [r2, #0]
	// Enable NVIC interrupt for EXTI4
	NVIC_EnableIRQ(EXTI2_IRQn);
	EXTI->IMR |= EXTI_IMR_MR4;
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	f042 0210 	orr.w	r2, r2, #16
 800064e:	601a      	str	r2, [r3, #0]
	EXTI->FTSR |= EXTI_FTSR_TR4;
 8000650:	68da      	ldr	r2, [r3, #12]
 8000652:	f042 0210 	orr.w	r2, r2, #16
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000e100 	.word	0xe000e100
 8000660:	40010400 	.word	0x40010400

08000664 <EXTI0_IRQHandler>:
#include "interrupts.h"

void EXTI0_IRQHandler(){
	EXTI->PR |= EXTI_PR_PR0; // Clear pending bit for EXTI0 line
 8000664:	4a1e      	ldr	r2, [pc, #120]	; (80006e0 <EXTI0_IRQHandler+0x7c>)
 8000666:	6953      	ldr	r3, [r2, #20]
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6153      	str	r3, [r2, #20]
	// Set clockwise rotation direction
	TIM3->CCER |= TIM_CCER_CC1P; // Set high polarity
 800066e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8000672:	8c13      	ldrh	r3, [r2, #32]
 8000674:	b29b      	uxth	r3, r3
 8000676:	f043 0302 	orr.w	r3, r3, #2
 800067a:	8413      	strh	r3, [r2, #32]
	TIM3->CCER &= ~TIM_CCER_CC2P; // Set low polarity
 800067c:	8c13      	ldrh	r3, [r2, #32]
 800067e:	b29b      	uxth	r3, r3
 8000680:	f023 0320 	bic.w	r3, r3, #32
 8000684:	b29b      	uxth	r3, r3
 8000686:	8413      	strh	r3, [r2, #32]
	TIM15->CCER &= ~TIM_CCER_CC1P; // Set low polarity
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <EXTI0_IRQHandler+0x80>)
 800068a:	8c19      	ldrh	r1, [r3, #32]
 800068c:	b289      	uxth	r1, r1
 800068e:	f021 0102 	bic.w	r1, r1, #2
 8000692:	b289      	uxth	r1, r1
 8000694:	8419      	strh	r1, [r3, #32]
	TIM15->CCER |= TIM_CCER_CC2P; // Set high polarity
 8000696:	8c19      	ldrh	r1, [r3, #32]
 8000698:	b289      	uxth	r1, r1
 800069a:	f041 0120 	orr.w	r1, r1, #32
 800069e:	8419      	strh	r1, [r3, #32]
	//TIM 3 out enable
	TIM3->CCER |= TIM_CCER_CC1E; // Output state channel 1 enable
 80006a0:	8c11      	ldrh	r1, [r2, #32]
 80006a2:	b289      	uxth	r1, r1
 80006a4:	f041 0101 	orr.w	r1, r1, #1
 80006a8:	8411      	strh	r1, [r2, #32]
	TIM3->CCER |= TIM_CCER_CC2E; // Output state channel 2 enable
 80006aa:	8c11      	ldrh	r1, [r2, #32]
 80006ac:	b289      	uxth	r1, r1
 80006ae:	f041 0110 	orr.w	r1, r1, #16
 80006b2:	8411      	strh	r1, [r2, #32]
	//TIM 15 out enable
	TIM15->CCER |= TIM_CCER_CC1E; // Output state channel 1 enable
 80006b4:	8c19      	ldrh	r1, [r3, #32]
 80006b6:	b289      	uxth	r1, r1
 80006b8:	f041 0101 	orr.w	r1, r1, #1
 80006bc:	8419      	strh	r1, [r3, #32]
	TIM15->CCER |= TIM_CCER_CC2E; // Output state channel 2 enable
 80006be:	8c19      	ldrh	r1, [r3, #32]
 80006c0:	b289      	uxth	r1, r1
 80006c2:	f041 0110 	orr.w	r1, r1, #16
 80006c6:	8419      	strh	r1, [r3, #32]
	// Run timers to control stepper motor
	TIM3->CR1 |= TIM_CR1_CEN;
 80006c8:	8811      	ldrh	r1, [r2, #0]
 80006ca:	b289      	uxth	r1, r1
 80006cc:	f041 0101 	orr.w	r1, r1, #1
 80006d0:	8011      	strh	r1, [r2, #0]
	TIM15->CR1 |= TIM_CR1_CEN;
 80006d2:	881a      	ldrh	r2, [r3, #0]
 80006d4:	b292      	uxth	r2, r2
 80006d6:	f042 0201 	orr.w	r2, r2, #1
 80006da:	801a      	strh	r2, [r3, #0]
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40010400 	.word	0x40010400
 80006e4:	40014000 	.word	0x40014000

080006e8 <EXTI1_IRQHandler>:
}

void EXTI1_IRQHandler() {
	EXTI->PR |= EXTI_PR_PR1; // Clear pending bit for EXTI3 line
 80006e8:	4a1e      	ldr	r2, [pc, #120]	; (8000764 <EXTI1_IRQHandler+0x7c>)
 80006ea:	6953      	ldr	r3, [r2, #20]
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6153      	str	r3, [r2, #20]
	// Set counter-clockwise rotation direction
	TIM3->CCER &= ~TIM_CCER_CC1P; // Set low polarity
 80006f2:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 80006f6:	8c13      	ldrh	r3, [r2, #32]
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	f023 0302 	bic.w	r3, r3, #2
 80006fe:	b29b      	uxth	r3, r3
 8000700:	8413      	strh	r3, [r2, #32]
	TIM3->CCER &= ~TIM_CCER_CC2P; // Set low polarity
 8000702:	8c13      	ldrh	r3, [r2, #32]
 8000704:	b29b      	uxth	r3, r3
 8000706:	f023 0320 	bic.w	r3, r3, #32
 800070a:	b29b      	uxth	r3, r3
 800070c:	8413      	strh	r3, [r2, #32]
	TIM15->CCER |= TIM_CCER_CC1P; // Set high polarity
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <EXTI1_IRQHandler+0x80>)
 8000710:	8c19      	ldrh	r1, [r3, #32]
 8000712:	b289      	uxth	r1, r1
 8000714:	f041 0102 	orr.w	r1, r1, #2
 8000718:	8419      	strh	r1, [r3, #32]
	TIM15->CCER |= TIM_CCER_CC2P; // Set high polarity
 800071a:	8c19      	ldrh	r1, [r3, #32]
 800071c:	b289      	uxth	r1, r1
 800071e:	f041 0120 	orr.w	r1, r1, #32
 8000722:	8419      	strh	r1, [r3, #32]
	//TIM 3 out enable
	TIM3->CCER |= TIM_CCER_CC1E; // Output state channel 1 enable
 8000724:	8c11      	ldrh	r1, [r2, #32]
 8000726:	b289      	uxth	r1, r1
 8000728:	f041 0101 	orr.w	r1, r1, #1
 800072c:	8411      	strh	r1, [r2, #32]
	TIM3->CCER |= TIM_CCER_CC2E; // Output state channel 2 enable
 800072e:	8c11      	ldrh	r1, [r2, #32]
 8000730:	b289      	uxth	r1, r1
 8000732:	f041 0110 	orr.w	r1, r1, #16
 8000736:	8411      	strh	r1, [r2, #32]
	//TIM 15 out enable
	TIM15->CCER |= TIM_CCER_CC1E; // Output state channel 1 enable
 8000738:	8c19      	ldrh	r1, [r3, #32]
 800073a:	b289      	uxth	r1, r1
 800073c:	f041 0101 	orr.w	r1, r1, #1
 8000740:	8419      	strh	r1, [r3, #32]
	TIM15->CCER |= TIM_CCER_CC2E; // Output state channel 2 enable
 8000742:	8c19      	ldrh	r1, [r3, #32]
 8000744:	b289      	uxth	r1, r1
 8000746:	f041 0110 	orr.w	r1, r1, #16
 800074a:	8419      	strh	r1, [r3, #32]
	// Run timers to control stepper motor
	TIM3->CR1 |= TIM_CR1_CEN;
 800074c:	8811      	ldrh	r1, [r2, #0]
 800074e:	b289      	uxth	r1, r1
 8000750:	f041 0101 	orr.w	r1, r1, #1
 8000754:	8011      	strh	r1, [r2, #0]
	TIM15->CR1 |= TIM_CR1_CEN;
 8000756:	881a      	ldrh	r2, [r3, #0]
 8000758:	b292      	uxth	r2, r2
 800075a:	f042 0201 	orr.w	r2, r2, #1
 800075e:	801a      	strh	r2, [r3, #0]
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40010400 	.word	0x40010400
 8000768:	40014000 	.word	0x40014000

0800076c <EXTI4_IRQHandler>:
}

void EXTI4_IRQHandler() {
	EXTI->PR |= EXTI_PR_PR4; // Clear pending bit for EXTI4 line
 800076c:	4a16      	ldr	r2, [pc, #88]	; (80007c8 <EXTI4_IRQHandler+0x5c>)
 800076e:	6953      	ldr	r3, [r2, #20]
 8000770:	f043 0310 	orr.w	r3, r3, #16
 8000774:	6153      	str	r3, [r2, #20]
	//TIM 3 out disable
	TIM3->CCER &= ~TIM_CCER_CC1E; // Output state channel 1 enable
 8000776:	4915      	ldr	r1, [pc, #84]	; (80007cc <EXTI4_IRQHandler+0x60>)
 8000778:	8c0b      	ldrh	r3, [r1, #32]
 800077a:	b29b      	uxth	r3, r3
 800077c:	f023 0301 	bic.w	r3, r3, #1
 8000780:	b29b      	uxth	r3, r3
 8000782:	840b      	strh	r3, [r1, #32]
	TIM3->CCER &= ~TIM_CCER_CC2E; // Output state channel 2 enable
 8000784:	8c0b      	ldrh	r3, [r1, #32]
 8000786:	b29b      	uxth	r3, r3
 8000788:	f023 0310 	bic.w	r3, r3, #16
 800078c:	b29b      	uxth	r3, r3
 800078e:	840b      	strh	r3, [r1, #32]
	//TIM 15 out disable
	TIM15->CCER &= ~TIM_CCER_CC1E; // Output state channel 1 enable
 8000790:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8000794:	8c13      	ldrh	r3, [r2, #32]
 8000796:	b29b      	uxth	r3, r3
 8000798:	f023 0301 	bic.w	r3, r3, #1
 800079c:	b29b      	uxth	r3, r3
 800079e:	8413      	strh	r3, [r2, #32]
	TIM15->CCER &= ~TIM_CCER_CC2E; // Output state channel 2 enable
 80007a0:	8c13      	ldrh	r3, [r2, #32]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	f023 0310 	bic.w	r3, r3, #16
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	8413      	strh	r3, [r2, #32]
	// Run timers to control stepper motor
	TIM3->CR1 &= ~TIM_CR1_CEN;
 80007ac:	880b      	ldrh	r3, [r1, #0]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	f023 0301 	bic.w	r3, r3, #1
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	800b      	strh	r3, [r1, #0]
	TIM15->CR1 &= ~TIM_CR1_CEN;
 80007b8:	8813      	ldrh	r3, [r2, #0]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	f023 0301 	bic.w	r3, r3, #1
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	8013      	strh	r3, [r2, #0]
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40010400 	.word	0x40010400
 80007cc:	40000400 	.word	0x40000400

080007d0 <ADC1_IRQHandler>:
}

void ADC1_IRQHandler() {
	/* Clear the selected ADC interrupt pending bits */
	ADC1->SR = 0;
 80007d0:	2200      	movs	r2, #0
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <ADC1_IRQHandler+0x20>)
 80007d4:	601a      	str	r2, [r3, #0]
    This function acts as a special kind of Data Memory Barrier. 
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 80007d6:	f3bf 8f4f 	dsb	sy
static __INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
                 (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80007da:	4906      	ldr	r1, [pc, #24]	; (80007f4 <ADC1_IRQHandler+0x24>)
 80007dc:	68ca      	ldr	r2, [r1, #12]
 80007de:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <ADC1_IRQHandler+0x28>)
 80007e4:	4313      	orrs	r3, r2
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
 80007e6:	60cb      	str	r3, [r1, #12]
 80007e8:	f3bf 8f4f 	dsb	sy
 80007ec:	e7fe      	b.n	80007ec <ADC1_IRQHandler+0x1c>
 80007ee:	bf00      	nop
 80007f0:	40012400 	.word	0x40012400
 80007f4:	e000ed00 	.word	0xe000ed00
 80007f8:	05fa0004 	.word	0x05fa0004

080007fc <main>:
#include "init.h"
#include "interrupts.h"

int main(void) {
 80007fc:	b508      	push	{r3, lr}
	/* General initialization*/
	initComRCC();
 80007fe:	f7ff fd07 	bl	8000210 <initComRCC>
	initGPIO();
 8000802:	f7ff fd67 	bl	80002d4 <initGPIO>
	initTIM3();
 8000806:	f7ff fdeb 	bl	80003e0 <initTIM3>
	initTIM15();
 800080a:	f7ff fe57 	bl	80004bc <initTIM15>
	initADC1();
 800080e:	f7ff fecd 	bl	80005ac <initADC1>
	initIRPT();
 8000812:	f7ff fefd 	bl	8000610 <initIRPT>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 8000816:	b662      	cpsie	i
 8000818:	e7fe      	b.n	8000818 <main+0x1c>
	...

0800081c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800081c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000854 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000820:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000822:	e003      	b.n	800082c <LoopCopyDataInit>

08000824 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000826:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000828:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800082a:	3104      	adds	r1, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800082c:	480b      	ldr	r0, [pc, #44]	; (800085c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000830:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000832:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000834:	d3f6      	bcc.n	8000824 <CopyDataInit>
	ldr	r2, =_sbss
 8000836:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000838:	e002      	b.n	8000840 <LoopFillZerobss>

0800083a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800083a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800083c:	f842 3b04 	str.w	r3, [r2], #4

08000840 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000842:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000844:	d3f9      	bcc.n	800083a <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 8000846:	f000 f86f 	bl	8000928 <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 800084a:	f000 f897 	bl	800097c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800084e:	f7ff ffd5 	bl	80007fc <main>
	bx	lr
 8000852:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000854:	20002000 	.word	0x20002000
	ldr	r3, =_sidata
 8000858:	080009e4 	.word	0x080009e4
	ldr	r0, =_sdata
 800085c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000860:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000864:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8000868:	2000001c 	.word	0x2000001c

0800086c <CEC_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800086c:	e7fe      	b.n	800086c <CEC_IRQHandler>

0800086e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800086e:	4770      	bx	lr

08000870 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000870:	e7fe      	b.n	8000870 <HardFault_Handler>

08000872 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000872:	e7fe      	b.n	8000872 <MemManage_Handler>

08000874 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000874:	e7fe      	b.n	8000874 <BusFault_Handler>

08000876 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000876:	e7fe      	b.n	8000876 <UsageFault_Handler>

08000878 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000878:	4770      	bx	lr

0800087a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800087a:	4770      	bx	lr

0800087c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800087c:	4770      	bx	lr
	...

08000880 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8000880:	b082      	sub	sp, #8
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	9301      	str	r3, [sp, #4]
 8000886:	9300      	str	r3, [sp, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000888:	4a24      	ldr	r2, [pc, #144]	; (800091c <SetSysClockTo24+0x9c>)
 800088a:	6813      	ldr	r3, [r2, #0]
 800088c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000890:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000892:	4b22      	ldr	r3, [pc, #136]	; (800091c <SetSysClockTo24+0x9c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089a:	9300      	str	r3, [sp, #0]
    StartUpCounter++;  
 800089c:	9b01      	ldr	r3, [sp, #4]
 800089e:	3301      	adds	r3, #1
 80008a0:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80008a2:	9b00      	ldr	r3, [sp, #0]
 80008a4:	b91b      	cbnz	r3, 80008ae <SetSysClockTo24+0x2e>
 80008a6:	9b01      	ldr	r3, [sp, #4]
 80008a8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80008ac:	d1f1      	bne.n	8000892 <SetSysClockTo24+0x12>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <SetSysClockTo24+0x9c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008b6:	d006      	beq.n	80008c6 <SetSysClockTo24+0x46>
  {
    HSEStatus = (uint32_t)0x01;
 80008b8:	2301      	movs	r3, #1
 80008ba:	9300      	str	r3, [sp, #0]
  else
  {
    HSEStatus = (uint32_t)0x00;
  }  

  if (HSEStatus == (uint32_t)0x01)
 80008bc:	9b00      	ldr	r3, [sp, #0]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d004      	beq.n	80008cc <SetSysClockTo24+0x4c>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 80008c2:	b002      	add	sp, #8
 80008c4:	4770      	bx	lr
    HSEStatus = (uint32_t)0x00;
 80008c6:	2300      	movs	r3, #0
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	e7f7      	b.n	80008bc <SetSysClockTo24+0x3c>
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <SetSysClockTo24+0x9c>)
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80008d2:	685a      	ldr	r2, [r3, #4]
 80008d4:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80008e0:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	f442 1298 	orr.w	r2, r2, #1245184	; 0x130000
 80008e8:	605a      	str	r2, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80008f0:	601a      	str	r2, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <SetSysClockTo24+0x9c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008fa:	d0fa      	beq.n	80008f2 <SetSysClockTo24+0x72>
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <SetSysClockTo24+0x9c>)
 80008fe:	685a      	ldr	r2, [r3, #4]
 8000900:	f022 0203 	bic.w	r2, r2, #3
 8000904:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	f042 0202 	orr.w	r2, r2, #2
 800090c:	605a      	str	r2, [r3, #4]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800090e:	4b03      	ldr	r3, [pc, #12]	; (800091c <SetSysClockTo24+0x9c>)
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f003 030c 	and.w	r3, r3, #12
 8000916:	2b08      	cmp	r3, #8
 8000918:	d1f9      	bne.n	800090e <SetSysClockTo24+0x8e>
 800091a:	e7d2      	b.n	80008c2 <SetSysClockTo24+0x42>
 800091c:	40021000 	.word	0x40021000

08000920 <SetSysClock>:
{
 8000920:	b508      	push	{r3, lr}
  SetSysClockTo24();
 8000922:	f7ff ffad 	bl	8000880 <SetSysClockTo24>
 8000926:	bd08      	pop	{r3, pc}

08000928 <SystemInit>:
{
 8000928:	b508      	push	{r3, lr}
  RCC->CR |= (uint32_t)0x00000001;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <SystemInit+0x48>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	f042 0201 	orr.w	r2, r2, #1
 8000932:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000934:	6859      	ldr	r1, [r3, #4]
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <SystemInit+0x4c>)
 8000938:	400a      	ands	r2, r1
 800093a:	605a      	str	r2, [r3, #4]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000942:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000946:	601a      	str	r2, [r3, #0]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800094e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000950:	685a      	ldr	r2, [r3, #4]
 8000952:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000956:	605a      	str	r2, [r3, #4]
  RCC->CIR = 0x009F0000;
 8000958:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800095c:	609a      	str	r2, [r3, #8]
  RCC->CFGR2 = 0x00000000;      
 800095e:	2200      	movs	r2, #0
 8000960:	62da      	str	r2, [r3, #44]	; 0x2c
  SetSysClock();
 8000962:	f7ff ffdd 	bl	8000920 <SetSysClock>
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800096a:	4b03      	ldr	r3, [pc, #12]	; (8000978 <SystemInit+0x50>)
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	bd08      	pop	{r3, pc}
 8000970:	40021000 	.word	0x40021000
 8000974:	f8ff0000 	.word	0xf8ff0000
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <__libc_init_array>:
 800097c:	b570      	push	{r4, r5, r6, lr}
 800097e:	2500      	movs	r5, #0
 8000980:	4e0c      	ldr	r6, [pc, #48]	; (80009b4 <__libc_init_array+0x38>)
 8000982:	4c0d      	ldr	r4, [pc, #52]	; (80009b8 <__libc_init_array+0x3c>)
 8000984:	1ba4      	subs	r4, r4, r6
 8000986:	10a4      	asrs	r4, r4, #2
 8000988:	42a5      	cmp	r5, r4
 800098a:	d109      	bne.n	80009a0 <__libc_init_array+0x24>
 800098c:	f000 f81a 	bl	80009c4 <_init>
 8000990:	2500      	movs	r5, #0
 8000992:	4e0a      	ldr	r6, [pc, #40]	; (80009bc <__libc_init_array+0x40>)
 8000994:	4c0a      	ldr	r4, [pc, #40]	; (80009c0 <__libc_init_array+0x44>)
 8000996:	1ba4      	subs	r4, r4, r6
 8000998:	10a4      	asrs	r4, r4, #2
 800099a:	42a5      	cmp	r5, r4
 800099c:	d105      	bne.n	80009aa <__libc_init_array+0x2e>
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009a4:	4798      	blx	r3
 80009a6:	3501      	adds	r5, #1
 80009a8:	e7ee      	b.n	8000988 <__libc_init_array+0xc>
 80009aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009ae:	4798      	blx	r3
 80009b0:	3501      	adds	r5, #1
 80009b2:	e7f2      	b.n	800099a <__libc_init_array+0x1e>
 80009b4:	080009dc 	.word	0x080009dc
 80009b8:	080009dc 	.word	0x080009dc
 80009bc:	080009dc 	.word	0x080009dc
 80009c0:	080009e0 	.word	0x080009e0

080009c4 <_init>:
 80009c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c6:	bf00      	nop
 80009c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ca:	bc08      	pop	{r3}
 80009cc:	469e      	mov	lr, r3
 80009ce:	4770      	bx	lr

080009d0 <_fini>:
 80009d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009d2:	bf00      	nop
 80009d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009d6:	bc08      	pop	{r3}
 80009d8:	469e      	mov	lr, r3
 80009da:	4770      	bx	lr
