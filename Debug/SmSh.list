
SmSh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a3c  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c0c  08000c14  00010c14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000c0c  08000c0c  00010c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000c10  08000c10  00010c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010c14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000c14  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  2000001c  08000c14  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010c14  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000125b  00000000  00000000  00010c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000492  00000000  00000000  00011e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000150  00000000  00000000  00012330  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00012480  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000a67  00000000  00000000  00012578  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000846  00000000  00000000  00012fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00013825  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000324  00000000  00000000  000138a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00013bc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000000 	.word	0x20000000
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08000bf4 	.word	0x08000bf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000004 	.word	0x20000004
 800020c:	08000bf4 	.word	0x08000bf4

08000210 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 800021a:	4908      	ldr	r1, [pc, #32]	; (800023c <NVIC_EnableIRQ+0x2c>)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	095b      	lsrs	r3, r3, #5
 8000222:	79fa      	ldrb	r2, [r7, #7]
 8000224:	f002 021f 	and.w	r2, r2, #31
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	e000e100 	.word	0xe000e100

08000240 <initComRCC>:
#include "init.h"

void initComRCC() {
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
// General settings to set SYSCLK
	//Reset RCC System
	RCC->CR |= RCC_CR_HSION;
 8000244:	4a3d      	ldr	r2, [pc, #244]	; (800033c <initComRCC+0xfc>)
 8000246:	4b3d      	ldr	r3, [pc, #244]	; (800033c <initComRCC+0xfc>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6013      	str	r3, [r2, #0]
	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
	RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000250:	493a      	ldr	r1, [pc, #232]	; (800033c <initComRCC+0xfc>)
 8000252:	4b3a      	ldr	r3, [pc, #232]	; (800033c <initComRCC+0xfc>)
 8000254:	685a      	ldr	r2, [r3, #4]
 8000256:	4b3a      	ldr	r3, [pc, #232]	; (8000340 <initComRCC+0x100>)
 8000258:	4013      	ands	r3, r2
 800025a:	604b      	str	r3, [r1, #4]
	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t)0xFEF6FFFF;
 800025c:	4a37      	ldr	r2, [pc, #220]	; (800033c <initComRCC+0xfc>)
 800025e:	4b37      	ldr	r3, [pc, #220]	; (800033c <initComRCC+0xfc>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800026a:	6013      	str	r3, [r2, #0]
	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
	RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800026c:	4a33      	ldr	r2, [pc, #204]	; (800033c <initComRCC+0xfc>)
 800026e:	4b33      	ldr	r3, [pc, #204]	; (800033c <initComRCC+0xfc>)
 8000270:	685b      	ldr	r3, [r3, #4]
 8000272:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000276:	6053      	str	r3, [r2, #4]
	//Set PLL multiplication
	RCC->CFGR |= RCC_CFGR_PLLMULL_2;
 8000278:	4a30      	ldr	r2, [pc, #192]	; (800033c <initComRCC+0xfc>)
 800027a:	4b30      	ldr	r3, [pc, #192]	; (800033c <initComRCC+0xfc>)
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000282:	6053      	str	r3, [r2, #4]
	/* Set CFGR2 register - HSE divider*/
	RCC->CFGR2 |= 0x00000000; // PLL is divided by 2
 8000284:	4a2d      	ldr	r2, [pc, #180]	; (800033c <initComRCC+0xfc>)
 8000286:	4b2d      	ldr	r3, [pc, #180]	; (800033c <initComRCC+0xfc>)
 8000288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800028a:	62d3      	str	r3, [r2, #44]	; 0x2c
	RCC->CFGR |= RCC_CFGR_MCO_2; // SYSCLK as an output on PA8
 800028c:	4a2b      	ldr	r2, [pc, #172]	; (800033c <initComRCC+0xfc>)
 800028e:	4b2b      	ldr	r3, [pc, #172]	; (800033c <initComRCC+0xfc>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000296:	6053      	str	r3, [r2, #4]
//	RCC->CFGR |= RCC_CFGR_MCO; // PLL/2 as an output on PA8
	// Set HSE through PLL as a SYSCLKstm32
	RCC->CFGR |= RCC_CFGR_SW_1; // SYSCLK is fed by PLL
 8000298:	4a28      	ldr	r2, [pc, #160]	; (800033c <initComRCC+0xfc>)
 800029a:	4b28      	ldr	r3, [pc, #160]	; (800033c <initComRCC+0xfc>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f043 0302 	orr.w	r3, r3, #2
 80002a2:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLSRC_PREDIV1; // PLL is fed by HSE after PREDIV
 80002a4:	4a25      	ldr	r2, [pc, #148]	; (800033c <initComRCC+0xfc>)
 80002a6:	4b25      	ldr	r3, [pc, #148]	; (800033c <initComRCC+0xfc>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ae:	6053      	str	r3, [r2, #4]

	// Enable HSE and then PLL
	RCC->CR |= RCC_CR_HSEON; // 24MHz HSE ON
 80002b0:	4a22      	ldr	r2, [pc, #136]	; (800033c <initComRCC+0xfc>)
 80002b2:	4b22      	ldr	r3, [pc, #136]	; (800033c <initComRCC+0xfc>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ba:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_PLLON; // PLL ON
 80002bc:	4a1f      	ldr	r2, [pc, #124]	; (800033c <initComRCC+0xfc>)
 80002be:	4b1f      	ldr	r3, [pc, #124]	; (800033c <initComRCC+0xfc>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002c6:	6013      	str	r3, [r2, #0]

// Enable clocking of peripheral
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 80002c8:	4a1c      	ldr	r2, [pc, #112]	; (800033c <initComRCC+0xfc>)
 80002ca:	4b1c      	ldr	r3, [pc, #112]	; (800033c <initComRCC+0xfc>)
 80002cc:	699b      	ldr	r3, [r3, #24]
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN; // GPIO A port
 80002d4:	4a19      	ldr	r2, [pc, #100]	; (800033c <initComRCC+0xfc>)
 80002d6:	4b19      	ldr	r3, [pc, #100]	; (800033c <initComRCC+0xfc>)
 80002d8:	699b      	ldr	r3, [r3, #24]
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN; // GPIO B port
 80002e0:	4a16      	ldr	r2, [pc, #88]	; (800033c <initComRCC+0xfc>)
 80002e2:	4b16      	ldr	r3, [pc, #88]	; (800033c <initComRCC+0xfc>)
 80002e4:	699b      	ldr	r3, [r3, #24]
 80002e6:	f043 0308 	orr.w	r3, r3, #8
 80002ea:	6193      	str	r3, [r2, #24]
	// Deinitialization of TIM15
	RCC->APB2RSTR |= RCC_APB2ENR_TIM15EN;
 80002ec:	4a13      	ldr	r2, [pc, #76]	; (800033c <initComRCC+0xfc>)
 80002ee:	4b13      	ldr	r3, [pc, #76]	; (800033c <initComRCC+0xfc>)
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002f6:	60d3      	str	r3, [r2, #12]
	RCC->APB2RSTR &= ~RCC_APB2ENR_TIM15EN;
 80002f8:	4a10      	ldr	r2, [pc, #64]	; (800033c <initComRCC+0xfc>)
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <initComRCC+0xfc>)
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000302:	60d3      	str	r3, [r2, #12]
	RCC->APB2ENR |= RCC_APB2ENR_TIM15EN; // TIM15
 8000304:	4a0d      	ldr	r2, [pc, #52]	; (800033c <initComRCC+0xfc>)
 8000306:	4b0d      	ldr	r3, [pc, #52]	; (800033c <initComRCC+0xfc>)
 8000308:	699b      	ldr	r3, [r3, #24]
 800030a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800030e:	6193      	str	r3, [r2, #24]

	RCC->APB1RSTR |= RCC_APB1ENR_TIM3EN;
 8000310:	4a0a      	ldr	r2, [pc, #40]	; (800033c <initComRCC+0xfc>)
 8000312:	4b0a      	ldr	r3, [pc, #40]	; (800033c <initComRCC+0xfc>)
 8000314:	691b      	ldr	r3, [r3, #16]
 8000316:	f043 0302 	orr.w	r3, r3, #2
 800031a:	6113      	str	r3, [r2, #16]
	RCC->APB1RSTR &= ~RCC_APB1ENR_TIM3EN;
 800031c:	4a07      	ldr	r2, [pc, #28]	; (800033c <initComRCC+0xfc>)
 800031e:	4b07      	ldr	r3, [pc, #28]	; (800033c <initComRCC+0xfc>)
 8000320:	691b      	ldr	r3, [r3, #16]
 8000322:	f023 0302 	bic.w	r3, r3, #2
 8000326:	6113      	str	r3, [r2, #16]
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; // TIM15
 8000328:	4a04      	ldr	r2, [pc, #16]	; (800033c <initComRCC+0xfc>)
 800032a:	4b04      	ldr	r3, [pc, #16]	; (800033c <initComRCC+0xfc>)
 800032c:	69db      	ldr	r3, [r3, #28]
 800032e:	f043 0302 	orr.w	r3, r3, #2
 8000332:	61d3      	str	r3, [r2, #28]
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	40021000 	.word	0x40021000
 8000340:	f8ff0000 	.word	0xf8ff0000

08000344 <initGPIO>:

void initGPIO() {
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
// Port A
	GPIOA->CRH |= GPIO_CRH_MODE8; // Set PA8 pin speed to 50 MHz
 8000348:	4a50      	ldr	r2, [pc, #320]	; (800048c <initGPIO+0x148>)
 800034a:	4b50      	ldr	r3, [pc, #320]	; (800048c <initGPIO+0x148>)
 800034c:	685b      	ldr	r3, [r3, #4]
 800034e:	f043 0303 	orr.w	r3, r3, #3
 8000352:	6053      	str	r3, [r2, #4]
	// Set PA8 pin as AF output push-pull for MCO
	GPIOA->CRH &= ~GPIO_CRH_CNF8;
 8000354:	4a4d      	ldr	r2, [pc, #308]	; (800048c <initGPIO+0x148>)
 8000356:	4b4d      	ldr	r3, [pc, #308]	; (800048c <initGPIO+0x148>)
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	f023 030c 	bic.w	r3, r3, #12
 800035e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= GPIO_CRH_CNF8_1;
 8000360:	4a4a      	ldr	r2, [pc, #296]	; (800048c <initGPIO+0x148>)
 8000362:	4b4a      	ldr	r3, [pc, #296]	; (800048c <initGPIO+0x148>)
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	f043 0308 	orr.w	r3, r3, #8
 800036a:	6053      	str	r3, [r2, #4]

	GPIOA->CRL |= GPIO_CRL_MODE2; // Set PA2 pin speed to 50 MHz
 800036c:	4a47      	ldr	r2, [pc, #284]	; (800048c <initGPIO+0x148>)
 800036e:	4b47      	ldr	r3, [pc, #284]	; (800048c <initGPIO+0x148>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000376:	6013      	str	r3, [r2, #0]
	// Set PA2 pin as AF output push-pull for TIM15
	GPIOA->CRL &= ~GPIO_CRL_CNF2;
 8000378:	4a44      	ldr	r2, [pc, #272]	; (800048c <initGPIO+0x148>)
 800037a:	4b44      	ldr	r3, [pc, #272]	; (800048c <initGPIO+0x148>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000382:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF2_1;
 8000384:	4a41      	ldr	r2, [pc, #260]	; (800048c <initGPIO+0x148>)
 8000386:	4b41      	ldr	r3, [pc, #260]	; (800048c <initGPIO+0x148>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800038e:	6013      	str	r3, [r2, #0]

	GPIOA->CRL |= GPIO_CRL_MODE3; // Set PA3 pin speed to 50 MHz
 8000390:	4a3e      	ldr	r2, [pc, #248]	; (800048c <initGPIO+0x148>)
 8000392:	4b3e      	ldr	r3, [pc, #248]	; (800048c <initGPIO+0x148>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800039a:	6013      	str	r3, [r2, #0]
	// Set PA3 pin as AF output push-pull for TIM15
	GPIOA->CRL &= ~GPIO_CRL_CNF3;
 800039c:	4a3b      	ldr	r2, [pc, #236]	; (800048c <initGPIO+0x148>)
 800039e:	4b3b      	ldr	r3, [pc, #236]	; (800048c <initGPIO+0x148>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003a6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF3_1;
 80003a8:	4a38      	ldr	r2, [pc, #224]	; (800048c <initGPIO+0x148>)
 80003aa:	4b38      	ldr	r3, [pc, #224]	; (800048c <initGPIO+0x148>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003b2:	6013      	str	r3, [r2, #0]

	GPIOA->CRL |= GPIO_CRL_MODE6; // Set PA6 pin speed to 50 MHz
 80003b4:	4a35      	ldr	r2, [pc, #212]	; (800048c <initGPIO+0x148>)
 80003b6:	4b35      	ldr	r3, [pc, #212]	; (800048c <initGPIO+0x148>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80003be:	6013      	str	r3, [r2, #0]
	// Set PA2 pin as AF output push-pull for TIM3
	GPIOA->CRL &= ~GPIO_CRL_CNF6;
 80003c0:	4a32      	ldr	r2, [pc, #200]	; (800048c <initGPIO+0x148>)
 80003c2:	4b32      	ldr	r3, [pc, #200]	; (800048c <initGPIO+0x148>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80003ca:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF6_1;
 80003cc:	4a2f      	ldr	r2, [pc, #188]	; (800048c <initGPIO+0x148>)
 80003ce:	4b2f      	ldr	r3, [pc, #188]	; (800048c <initGPIO+0x148>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80003d6:	6013      	str	r3, [r2, #0]

	GPIOA->CRL |= GPIO_CRL_MODE7; // Set PA7 pin speed to 50 MHz
 80003d8:	4a2c      	ldr	r2, [pc, #176]	; (800048c <initGPIO+0x148>)
 80003da:	4b2c      	ldr	r3, [pc, #176]	; (800048c <initGPIO+0x148>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80003e2:	6013      	str	r3, [r2, #0]
	// Set PA3 pin as AF output push-pull for TIM3
	GPIOA->CRL &= ~GPIO_CRL_CNF7;
 80003e4:	4a29      	ldr	r2, [pc, #164]	; (800048c <initGPIO+0x148>)
 80003e6:	4b29      	ldr	r3, [pc, #164]	; (800048c <initGPIO+0x148>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80003ee:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF7_1;
 80003f0:	4a26      	ldr	r2, [pc, #152]	; (800048c <initGPIO+0x148>)
 80003f2:	4b26      	ldr	r3, [pc, #152]	; (800048c <initGPIO+0x148>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003fa:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE0; // Set PA0 pin as input
 80003fc:	4a23      	ldr	r2, [pc, #140]	; (800048c <initGPIO+0x148>)
 80003fe:	4b23      	ldr	r3, [pc, #140]	; (800048c <initGPIO+0x148>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f023 0303 	bic.w	r3, r3, #3
 8000406:	6013      	str	r3, [r2, #0]
	// Set PA0 pin to input with pull-up/pull-down
	GPIOA->CRL &= ~GPIO_CRL_CNF0;
 8000408:	4a20      	ldr	r2, [pc, #128]	; (800048c <initGPIO+0x148>)
 800040a:	4b20      	ldr	r3, [pc, #128]	; (800048c <initGPIO+0x148>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f023 030c 	bic.w	r3, r3, #12
 8000412:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF0_1;
 8000414:	4a1d      	ldr	r2, [pc, #116]	; (800048c <initGPIO+0x148>)
 8000416:	4b1d      	ldr	r3, [pc, #116]	; (800048c <initGPIO+0x148>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f043 0308 	orr.w	r3, r3, #8
 800041e:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~GPIO_CRL_MODE1; // Set PB3 pin as input
 8000420:	4a1a      	ldr	r2, [pc, #104]	; (800048c <initGPIO+0x148>)
 8000422:	4b1a      	ldr	r3, [pc, #104]	; (800048c <initGPIO+0x148>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800042a:	6013      	str	r3, [r2, #0]
	// Set PB3 pin to input with pull-up/pull-down
	GPIOA->CRL &= ~GPIO_CRL_CNF1;
 800042c:	4a17      	ldr	r2, [pc, #92]	; (800048c <initGPIO+0x148>)
 800042e:	4b17      	ldr	r3, [pc, #92]	; (800048c <initGPIO+0x148>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000436:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF1_1;
 8000438:	4a14      	ldr	r2, [pc, #80]	; (800048c <initGPIO+0x148>)
 800043a:	4b14      	ldr	r3, [pc, #80]	; (800048c <initGPIO+0x148>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000442:	6013      	str	r3, [r2, #0]

//Port B
	GPIOB->CRL &= ~GPIO_CRL_MODE4; // Set PB4 pin as input
 8000444:	4a12      	ldr	r2, [pc, #72]	; (8000490 <initGPIO+0x14c>)
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <initGPIO+0x14c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800044e:	6013      	str	r3, [r2, #0]
	// Set PB4 pin to input with pull-up/pull-down
	GPIOB->CRL &= ~GPIO_CRL_CNF4;
 8000450:	4a0f      	ldr	r2, [pc, #60]	; (8000490 <initGPIO+0x14c>)
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <initGPIO+0x14c>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800045a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_CNF4_1;
 800045c:	4a0c      	ldr	r2, [pc, #48]	; (8000490 <initGPIO+0x14c>)
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <initGPIO+0x14c>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000466:	6013      	str	r3, [r2, #0]

// EXTI0 line is fed by PA
	AFIO->EXTICR[0] |= AFIO_EXTICR1_EXTI0_PA;
 8000468:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <initGPIO+0x150>)
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <initGPIO+0x150>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	6093      	str	r3, [r2, #8]
// EXTI1 line is fed by PA
	AFIO->EXTICR[0] |= AFIO_EXTICR1_EXTI1_PA;
 8000470:	4a08      	ldr	r2, [pc, #32]	; (8000494 <initGPIO+0x150>)
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <initGPIO+0x150>)
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	6093      	str	r3, [r2, #8]
// EXTI2 line is fed by PB
	AFIO->EXTICR[1] |= AFIO_EXTICR2_EXTI4_PB;
 8000478:	4a06      	ldr	r2, [pc, #24]	; (8000494 <initGPIO+0x150>)
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <initGPIO+0x150>)
 800047c:	68db      	ldr	r3, [r3, #12]
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	60d3      	str	r3, [r2, #12]
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	40010800 	.word	0x40010800
 8000490:	40010c00 	.word	0x40010c00
 8000494:	40010000 	.word	0x40010000

08000498 <initTIM3>:

void initTIM3() {
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
// General settings to set TimeBase parameters
	// Set TIM3 as a master
//	TIM3->CR2 &= ~TIM_CR2_MMS;
//	TIM3->CR2 |= TIM_CR2_MMS_1;
//	TIM15->CR1 |= TIM_CR1_DIR; // Upcount mode
	TIM3->BDTR |= TIM_BDTR_MOE;
 800049c:	4a4c      	ldr	r2, [pc, #304]	; (80005d0 <initTIM3+0x138>)
 800049e:	4b4c      	ldr	r3, [pc, #304]	; (80005d0 <initTIM3+0x138>)
 80004a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80004aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
	TIM3->ARR = 0xFFFF; 	   // TIM15 auto reload register is set to 65535
 80004b4:	4b46      	ldr	r3, [pc, #280]	; (80005d0 <initTIM3+0x138>)
 80004b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004ba:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM3->PSC = 0x4;
 80004bc:	4b44      	ldr	r3, [pc, #272]	; (80005d0 <initTIM3+0x138>)
 80004be:	2204      	movs	r2, #4
 80004c0:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM3->RCR = 0;
 80004c2:	4b43      	ldr	r3, [pc, #268]	; (80005d0 <initTIM3+0x138>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	861a      	strh	r2, [r3, #48]	; 0x30
	// Enable TIM3
//	TIM3->CR1 |= TIM_CR1_CEN;
//Channel 1
	TIM3->CCER &= ~TIM_CCER_CC1E; // Disable channel 1
 80004c8:	4a41      	ldr	r2, [pc, #260]	; (80005d0 <initTIM3+0x138>)
 80004ca:	4b41      	ldr	r3, [pc, #260]	; (80005d0 <initTIM3+0x138>)
 80004cc:	8c1b      	ldrh	r3, [r3, #32]
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	f023 0301 	bic.w	r3, r3, #1
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	8413      	strh	r3, [r2, #32]
	/* Reset the Output Compare Mode Bits */
	TIM3->CCMR1 &=	~TIM_CCMR1_OC1M;
 80004d8:	4a3d      	ldr	r2, [pc, #244]	; (80005d0 <initTIM3+0x138>)
 80004da:	4b3d      	ldr	r3, [pc, #244]	; (80005d0 <initTIM3+0x138>)
 80004dc:	8b1b      	ldrh	r3, [r3, #24]
 80004de:	b29b      	uxth	r3, r3
 80004e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	8313      	strh	r3, [r2, #24]
	TIM3->CCMR1 &=	~TIM_CCMR1_CC1S;
 80004e8:	4a39      	ldr	r2, [pc, #228]	; (80005d0 <initTIM3+0x138>)
 80004ea:	4b39      	ldr	r3, [pc, #228]	; (80005d0 <initTIM3+0x138>)
 80004ec:	8b1b      	ldrh	r3, [r3, #24]
 80004ee:	b29b      	uxth	r3, r3
 80004f0:	f023 0303 	bic.w	r3, r3, #3
 80004f4:	b29b      	uxth	r3, r3
 80004f6:	8313      	strh	r3, [r2, #24]
	TIM3->CCER &= ~TIM_CCER_CC1E;
 80004f8:	4a35      	ldr	r2, [pc, #212]	; (80005d0 <initTIM3+0x138>)
 80004fa:	4b35      	ldr	r3, [pc, #212]	; (80005d0 <initTIM3+0x138>)
 80004fc:	8c1b      	ldrh	r3, [r3, #32]
 80004fe:	b29b      	uxth	r3, r3
 8000500:	f023 0301 	bic.w	r3, r3, #1
 8000504:	b29b      	uxth	r3, r3
 8000506:	8413      	strh	r3, [r2, #32]
	TIM3->CCER &= ~TIM_CCER_CC1NP;
 8000508:	4a31      	ldr	r2, [pc, #196]	; (80005d0 <initTIM3+0x138>)
 800050a:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <initTIM3+0x138>)
 800050c:	8c1b      	ldrh	r3, [r3, #32]
 800050e:	b29b      	uxth	r3, r3
 8000510:	f023 0308 	bic.w	r3, r3, #8
 8000514:	b29b      	uxth	r3, r3
 8000516:	8413      	strh	r3, [r2, #32]

	TIM3->CCMR1 |= TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_1; // Set output compare toggle mode
 8000518:	4a2d      	ldr	r2, [pc, #180]	; (80005d0 <initTIM3+0x138>)
 800051a:	4b2d      	ldr	r3, [pc, #180]	; (80005d0 <initTIM3+0x138>)
 800051c:	8b1b      	ldrh	r3, [r3, #24]
 800051e:	b29b      	uxth	r3, r3
 8000520:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000524:	b29b      	uxth	r3, r3
 8000526:	8313      	strh	r3, [r2, #24]
//	TIM3->CCER &= ~TIM_CCER_CC1P; // Set high polarity
//	TIM3->CCER |= TIM_CCER_CC1E; // Output state channel 1 enable

	TIM3->CCR1 |= TIM_CCR1_CCR1; // Set 90 deg shift
 8000528:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <initTIM3+0x138>)
 800052a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800052c:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <initTIM3+0x138>)
 800052e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000532:	869a      	strh	r2, [r3, #52]	; 0x34
	TIM3->CCMR1 |= TIM_CCMR1_OC1PE; // Enable preload register
 8000534:	4a26      	ldr	r2, [pc, #152]	; (80005d0 <initTIM3+0x138>)
 8000536:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <initTIM3+0x138>)
 8000538:	8b1b      	ldrh	r3, [r3, #24]
 800053a:	b29b      	uxth	r3, r3
 800053c:	f043 0308 	orr.w	r3, r3, #8
 8000540:	b29b      	uxth	r3, r3
 8000542:	8313      	strh	r3, [r2, #24]

// Channel 2
	TIM3->CCER &= ~TIM_CCER_CC2E; // Disable channel 2
 8000544:	4a22      	ldr	r2, [pc, #136]	; (80005d0 <initTIM3+0x138>)
 8000546:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <initTIM3+0x138>)
 8000548:	8c1b      	ldrh	r3, [r3, #32]
 800054a:	b29b      	uxth	r3, r3
 800054c:	f023 0310 	bic.w	r3, r3, #16
 8000550:	b29b      	uxth	r3, r3
 8000552:	8413      	strh	r3, [r2, #32]
	/* Reset the Output Compare Mode Bits */
	TIM3->CCMR1 &=	~TIM_CCMR1_OC2M;
 8000554:	4a1e      	ldr	r2, [pc, #120]	; (80005d0 <initTIM3+0x138>)
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <initTIM3+0x138>)
 8000558:	8b1b      	ldrh	r3, [r3, #24]
 800055a:	b29b      	uxth	r3, r3
 800055c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000560:	b29b      	uxth	r3, r3
 8000562:	8313      	strh	r3, [r2, #24]
	TIM3->CCMR1 &=	~TIM_CCMR1_CC2S;
 8000564:	4a1a      	ldr	r2, [pc, #104]	; (80005d0 <initTIM3+0x138>)
 8000566:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <initTIM3+0x138>)
 8000568:	8b1b      	ldrh	r3, [r3, #24]
 800056a:	b29b      	uxth	r3, r3
 800056c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000570:	b29b      	uxth	r3, r3
 8000572:	8313      	strh	r3, [r2, #24]
	TIM3->CCER &= ~TIM_CCER_CC2E;
 8000574:	4a16      	ldr	r2, [pc, #88]	; (80005d0 <initTIM3+0x138>)
 8000576:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <initTIM3+0x138>)
 8000578:	8c1b      	ldrh	r3, [r3, #32]
 800057a:	b29b      	uxth	r3, r3
 800057c:	f023 0310 	bic.w	r3, r3, #16
 8000580:	b29b      	uxth	r3, r3
 8000582:	8413      	strh	r3, [r2, #32]
	TIM3->CCER &= ~TIM_CCER_CC2NP;
 8000584:	4a12      	ldr	r2, [pc, #72]	; (80005d0 <initTIM3+0x138>)
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <initTIM3+0x138>)
 8000588:	8c1b      	ldrh	r3, [r3, #32]
 800058a:	b29b      	uxth	r3, r3
 800058c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000590:	b29b      	uxth	r3, r3
 8000592:	8413      	strh	r3, [r2, #32]

	TIM3->CCMR1 |= TIM_CCMR1_OC2M_0 | TIM_CCMR1_OC2M_1; // Set output compare toggle mode
 8000594:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <initTIM3+0x138>)
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <initTIM3+0x138>)
 8000598:	8b1b      	ldrh	r3, [r3, #24]
 800059a:	b29b      	uxth	r3, r3
 800059c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	8313      	strh	r3, [r2, #24]
//	TIM3->CCER |= TIM_CCER_CC2P; // Set low polarity
//	TIM3->CCER |= TIM_CCER_CC2E; // Output state channel 2 enable

	TIM3->CCR2 |= TIM_CCR1_CCR1/2; // Set 45 deg shift
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <initTIM3+0x138>)
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <initTIM3+0x138>)
 80005a8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	ea6f 33d3 	mvn.w	r3, r3, lsr #15
 80005b0:	ea6f 33c3 	mvn.w	r3, r3, lsl #15
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	8713      	strh	r3, [r2, #56]	; 0x38
	TIM3->CCMR1 |= TIM_CCMR1_OC2PE; // Enable preload register
 80005b8:	4a05      	ldr	r2, [pc, #20]	; (80005d0 <initTIM3+0x138>)
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <initTIM3+0x138>)
 80005bc:	8b1b      	ldrh	r3, [r3, #24]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	8313      	strh	r3, [r2, #24]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	40000400 	.word	0x40000400

080005d4 <initTIM15>:

void initTIM15() {
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
//	TIM15->SMCR &= ~TIM_SMCR_TS;
	// Configure a trigger mode - counter starts at a rising edge of TRIGI
//	TIM15->SMCR &= ~TIM_SMCR_SMS;
//	TIM15->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
//	TIM15->CR1 |= TIM_CR1_DIR; // Upcount mode
	TIM15->BDTR |= TIM_BDTR_MOE;
 80005d8:	4a54      	ldr	r2, [pc, #336]	; (800072c <initTIM15+0x158>)
 80005da:	4b54      	ldr	r3, [pc, #336]	; (800072c <initTIM15+0x158>)
 80005dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80005e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
	TIM15->ARR = 0xFFFF; 	   // TIM15 auto reload register is set to 65535
 80005f0:	4b4e      	ldr	r3, [pc, #312]	; (800072c <initTIM15+0x158>)
 80005f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005f6:	859a      	strh	r2, [r3, #44]	; 0x2c
	TIM15->PSC = 0x4;
 80005f8:	4b4c      	ldr	r3, [pc, #304]	; (800072c <initTIM15+0x158>)
 80005fa:	2204      	movs	r2, #4
 80005fc:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM15->RCR = 0;
 80005fe:	4b4b      	ldr	r3, [pc, #300]	; (800072c <initTIM15+0x158>)
 8000600:	2200      	movs	r2, #0
 8000602:	861a      	strh	r2, [r3, #48]	; 0x30

	// Enable TIM15
//	TIM15->CR1 |= TIM_CR1_CEN;
	// PWM settings
//Channel 1
	TIM15->CCER &= ~TIM_CCER_CC1E; // Disable channel 1
 8000604:	4a49      	ldr	r2, [pc, #292]	; (800072c <initTIM15+0x158>)
 8000606:	4b49      	ldr	r3, [pc, #292]	; (800072c <initTIM15+0x158>)
 8000608:	8c1b      	ldrh	r3, [r3, #32]
 800060a:	b29b      	uxth	r3, r3
 800060c:	f023 0301 	bic.w	r3, r3, #1
 8000610:	b29b      	uxth	r3, r3
 8000612:	8413      	strh	r3, [r2, #32]
	/* Reset the Output Compare Mode Bits */
	TIM15->CCMR1 &=	~TIM_CCMR1_OC1M;
 8000614:	4a45      	ldr	r2, [pc, #276]	; (800072c <initTIM15+0x158>)
 8000616:	4b45      	ldr	r3, [pc, #276]	; (800072c <initTIM15+0x158>)
 8000618:	8b1b      	ldrh	r3, [r3, #24]
 800061a:	b29b      	uxth	r3, r3
 800061c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000620:	b29b      	uxth	r3, r3
 8000622:	8313      	strh	r3, [r2, #24]
	TIM15->CCMR1 &=	~TIM_CCMR1_CC1S;
 8000624:	4a41      	ldr	r2, [pc, #260]	; (800072c <initTIM15+0x158>)
 8000626:	4b41      	ldr	r3, [pc, #260]	; (800072c <initTIM15+0x158>)
 8000628:	8b1b      	ldrh	r3, [r3, #24]
 800062a:	b29b      	uxth	r3, r3
 800062c:	f023 0303 	bic.w	r3, r3, #3
 8000630:	b29b      	uxth	r3, r3
 8000632:	8313      	strh	r3, [r2, #24]
	TIM15->CCER &= ~TIM_CCER_CC1E;
 8000634:	4a3d      	ldr	r2, [pc, #244]	; (800072c <initTIM15+0x158>)
 8000636:	4b3d      	ldr	r3, [pc, #244]	; (800072c <initTIM15+0x158>)
 8000638:	8c1b      	ldrh	r3, [r3, #32]
 800063a:	b29b      	uxth	r3, r3
 800063c:	f023 0301 	bic.w	r3, r3, #1
 8000640:	b29b      	uxth	r3, r3
 8000642:	8413      	strh	r3, [r2, #32]
	TIM15->CCER &= ~TIM_CCER_CC1NP;
 8000644:	4a39      	ldr	r2, [pc, #228]	; (800072c <initTIM15+0x158>)
 8000646:	4b39      	ldr	r3, [pc, #228]	; (800072c <initTIM15+0x158>)
 8000648:	8c1b      	ldrh	r3, [r3, #32]
 800064a:	b29b      	uxth	r3, r3
 800064c:	f023 0308 	bic.w	r3, r3, #8
 8000650:	b29b      	uxth	r3, r3
 8000652:	8413      	strh	r3, [r2, #32]

	TIM15->CCMR1 |= TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_1; // Set output compare toggle mode
 8000654:	4a35      	ldr	r2, [pc, #212]	; (800072c <initTIM15+0x158>)
 8000656:	4b35      	ldr	r3, [pc, #212]	; (800072c <initTIM15+0x158>)
 8000658:	8b1b      	ldrh	r3, [r3, #24]
 800065a:	b29b      	uxth	r3, r3
 800065c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000660:	b29b      	uxth	r3, r3
 8000662:	8313      	strh	r3, [r2, #24]
	TIM15->CCER |= TIM_CCER_CC1P; // Set low polarity
 8000664:	4a31      	ldr	r2, [pc, #196]	; (800072c <initTIM15+0x158>)
 8000666:	4b31      	ldr	r3, [pc, #196]	; (800072c <initTIM15+0x158>)
 8000668:	8c1b      	ldrh	r3, [r3, #32]
 800066a:	b29b      	uxth	r3, r3
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	b29b      	uxth	r3, r3
 8000672:	8413      	strh	r3, [r2, #32]
//	TIM15->CCER |= TIM_CCER_CC1E; // Output state channel 1 enable

	TIM15->CCR1 |= TIM_CCR1_CCR1; // Set duty cycle to 50%
 8000674:	4b2d      	ldr	r3, [pc, #180]	; (800072c <initTIM15+0x158>)
 8000676:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000678:	4b2c      	ldr	r3, [pc, #176]	; (800072c <initTIM15+0x158>)
 800067a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800067e:	869a      	strh	r2, [r3, #52]	; 0x34
	TIM15->CCMR1 |= TIM_CCMR1_OC1PE; // Enable preload register
 8000680:	4a2a      	ldr	r2, [pc, #168]	; (800072c <initTIM15+0x158>)
 8000682:	4b2a      	ldr	r3, [pc, #168]	; (800072c <initTIM15+0x158>)
 8000684:	8b1b      	ldrh	r3, [r3, #24]
 8000686:	b29b      	uxth	r3, r3
 8000688:	f043 0308 	orr.w	r3, r3, #8
 800068c:	b29b      	uxth	r3, r3
 800068e:	8313      	strh	r3, [r2, #24]

// Channel 2
	TIM15->CCER &= ~TIM_CCER_CC2E; // Disable channel 2
 8000690:	4a26      	ldr	r2, [pc, #152]	; (800072c <initTIM15+0x158>)
 8000692:	4b26      	ldr	r3, [pc, #152]	; (800072c <initTIM15+0x158>)
 8000694:	8c1b      	ldrh	r3, [r3, #32]
 8000696:	b29b      	uxth	r3, r3
 8000698:	f023 0310 	bic.w	r3, r3, #16
 800069c:	b29b      	uxth	r3, r3
 800069e:	8413      	strh	r3, [r2, #32]
	/* Reset the Output Compare Mode Bits */
	TIM15->CCMR1 &=	~TIM_CCMR1_OC2M;
 80006a0:	4a22      	ldr	r2, [pc, #136]	; (800072c <initTIM15+0x158>)
 80006a2:	4b22      	ldr	r3, [pc, #136]	; (800072c <initTIM15+0x158>)
 80006a4:	8b1b      	ldrh	r3, [r3, #24]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	8313      	strh	r3, [r2, #24]
	TIM15->CCMR1 &=	~TIM_CCMR1_CC2S;
 80006b0:	4a1e      	ldr	r2, [pc, #120]	; (800072c <initTIM15+0x158>)
 80006b2:	4b1e      	ldr	r3, [pc, #120]	; (800072c <initTIM15+0x158>)
 80006b4:	8b1b      	ldrh	r3, [r3, #24]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80006bc:	b29b      	uxth	r3, r3
 80006be:	8313      	strh	r3, [r2, #24]
	TIM15->CCER &= ~TIM_CCER_CC2E;
 80006c0:	4a1a      	ldr	r2, [pc, #104]	; (800072c <initTIM15+0x158>)
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <initTIM15+0x158>)
 80006c4:	8c1b      	ldrh	r3, [r3, #32]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	f023 0310 	bic.w	r3, r3, #16
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	8413      	strh	r3, [r2, #32]
	TIM15->CCER &= ~TIM_CCER_CC2NP;
 80006d0:	4a16      	ldr	r2, [pc, #88]	; (800072c <initTIM15+0x158>)
 80006d2:	4b16      	ldr	r3, [pc, #88]	; (800072c <initTIM15+0x158>)
 80006d4:	8c1b      	ldrh	r3, [r3, #32]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006dc:	b29b      	uxth	r3, r3
 80006de:	8413      	strh	r3, [r2, #32]

	TIM15->CCMR1 |= TIM_CCMR1_OC2M_0 | TIM_CCMR1_OC2M_1; // Set output compare toggle mode
 80006e0:	4a12      	ldr	r2, [pc, #72]	; (800072c <initTIM15+0x158>)
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <initTIM15+0x158>)
 80006e4:	8b1b      	ldrh	r3, [r3, #24]
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	8313      	strh	r3, [r2, #24]
	TIM15->CCER &= ~TIM_CCER_CC2P; // Set high polarity
 80006f0:	4a0e      	ldr	r2, [pc, #56]	; (800072c <initTIM15+0x158>)
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <initTIM15+0x158>)
 80006f4:	8c1b      	ldrh	r3, [r3, #32]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	f023 0320 	bic.w	r3, r3, #32
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	8413      	strh	r3, [r2, #32]
//	TIM15->CCER |= TIM_CCER_CC2E; // Output state channel 2 enable

	TIM15->CCR2 |= TIM_CCR1_CCR1/2; // Set duty cycle to 50%
 8000700:	4a0a      	ldr	r2, [pc, #40]	; (800072c <initTIM15+0x158>)
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <initTIM15+0x158>)
 8000704:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000706:	b29b      	uxth	r3, r3
 8000708:	ea6f 33d3 	mvn.w	r3, r3, lsr #15
 800070c:	ea6f 33c3 	mvn.w	r3, r3, lsl #15
 8000710:	b29b      	uxth	r3, r3
 8000712:	8713      	strh	r3, [r2, #56]	; 0x38
	TIM15->CCMR1 |= TIM_CCMR1_OC2PE; // Enable preload register
 8000714:	4a05      	ldr	r2, [pc, #20]	; (800072c <initTIM15+0x158>)
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <initTIM15+0x158>)
 8000718:	8b1b      	ldrh	r3, [r3, #24]
 800071a:	b29b      	uxth	r3, r3
 800071c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000720:	b29b      	uxth	r3, r3
 8000722:	8313      	strh	r3, [r2, #24]
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	40014000 	.word	0x40014000

08000730 <initIRPT>:

void initIRPT() {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	// Enable NVIC interrupt for EXTI0
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000734:	2006      	movs	r0, #6
 8000736:	f7ff fd6b 	bl	8000210 <NVIC_EnableIRQ>
	EXTI->IMR |= EXTI_IMR_MR0;
 800073a:	4a16      	ldr	r2, [pc, #88]	; (8000794 <initIRPT+0x64>)
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <initIRPT+0x64>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR0;
 8000746:	4a13      	ldr	r2, [pc, #76]	; (8000794 <initIRPT+0x64>)
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <initIRPT+0x64>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	60d3      	str	r3, [r2, #12]
	// Enable NVIC interrupt for EXTI1
	NVIC_EnableIRQ(EXTI1_IRQn);
 8000752:	2007      	movs	r0, #7
 8000754:	f7ff fd5c 	bl	8000210 <NVIC_EnableIRQ>
	EXTI->IMR |= EXTI_IMR_MR1;
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <initIRPT+0x64>)
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <initIRPT+0x64>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f043 0302 	orr.w	r3, r3, #2
 8000762:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR1;
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <initIRPT+0x64>)
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <initIRPT+0x64>)
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	f043 0302 	orr.w	r3, r3, #2
 800076e:	60d3      	str	r3, [r2, #12]
	// Enable NVIC interrupt for EXTI4
	NVIC_EnableIRQ(EXTI2_IRQn);
 8000770:	2008      	movs	r0, #8
 8000772:	f7ff fd4d 	bl	8000210 <NVIC_EnableIRQ>
	EXTI->IMR |= EXTI_IMR_MR4;
 8000776:	4a07      	ldr	r2, [pc, #28]	; (8000794 <initIRPT+0x64>)
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <initIRPT+0x64>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR4;
 8000782:	4a04      	ldr	r2, [pc, #16]	; (8000794 <initIRPT+0x64>)
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <initIRPT+0x64>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	f043 0310 	orr.w	r3, r3, #16
 800078c:	60d3      	str	r3, [r2, #12]
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40010400 	.word	0x40010400

08000798 <EXTI0_IRQHandler>:
#include "interrupts.h"

void EXTI0_IRQHandler(){
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PR0; // Clear pending bit for EXTI0 line
 800079c:	4a2c      	ldr	r2, [pc, #176]	; (8000850 <EXTI0_IRQHandler+0xb8>)
 800079e:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <EXTI0_IRQHandler+0xb8>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	f043 0301 	orr.w	r3, r3, #1
 80007a6:	6153      	str	r3, [r2, #20]
	// Set clockwise rotation direction
	TIM3->CCER |= TIM_CCER_CC1P; // Set high polarity
 80007a8:	4a2a      	ldr	r2, [pc, #168]	; (8000854 <EXTI0_IRQHandler+0xbc>)
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <EXTI0_IRQHandler+0xbc>)
 80007ac:	8c1b      	ldrh	r3, [r3, #32]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	8413      	strh	r3, [r2, #32]
	TIM3->CCER &= ~TIM_CCER_CC2P; // Set low polarity
 80007b8:	4a26      	ldr	r2, [pc, #152]	; (8000854 <EXTI0_IRQHandler+0xbc>)
 80007ba:	4b26      	ldr	r3, [pc, #152]	; (8000854 <EXTI0_IRQHandler+0xbc>)
 80007bc:	8c1b      	ldrh	r3, [r3, #32]
 80007be:	b29b      	uxth	r3, r3
 80007c0:	f023 0320 	bic.w	r3, r3, #32
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	8413      	strh	r3, [r2, #32]
	TIM15->CCER &= ~TIM_CCER_CC1P; // Set low polarity
 80007c8:	4a23      	ldr	r2, [pc, #140]	; (8000858 <EXTI0_IRQHandler+0xc0>)
 80007ca:	4b23      	ldr	r3, [pc, #140]	; (8000858 <EXTI0_IRQHandler+0xc0>)
 80007cc:	8c1b      	ldrh	r3, [r3, #32]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	f023 0302 	bic.w	r3, r3, #2
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	8413      	strh	r3, [r2, #32]
	TIM15->CCER |= TIM_CCER_CC2P; // Set high polarity
 80007d8:	4a1f      	ldr	r2, [pc, #124]	; (8000858 <EXTI0_IRQHandler+0xc0>)
 80007da:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <EXTI0_IRQHandler+0xc0>)
 80007dc:	8c1b      	ldrh	r3, [r3, #32]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	f043 0320 	orr.w	r3, r3, #32
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	8413      	strh	r3, [r2, #32]
	//TIM 3 out enable
	TIM3->CCER |= TIM_CCER_CC1E; // Output state channel 1 enable
 80007e8:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <EXTI0_IRQHandler+0xbc>)
 80007ea:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <EXTI0_IRQHandler+0xbc>)
 80007ec:	8c1b      	ldrh	r3, [r3, #32]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	8413      	strh	r3, [r2, #32]
	TIM3->CCER |= TIM_CCER_CC2E; // Output state channel 2 enable
 80007f8:	4a16      	ldr	r2, [pc, #88]	; (8000854 <EXTI0_IRQHandler+0xbc>)
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <EXTI0_IRQHandler+0xbc>)
 80007fc:	8c1b      	ldrh	r3, [r3, #32]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f043 0310 	orr.w	r3, r3, #16
 8000804:	b29b      	uxth	r3, r3
 8000806:	8413      	strh	r3, [r2, #32]
	//TIM 15 out enable
	TIM15->CCER |= TIM_CCER_CC1E; // Output state channel 1 enable
 8000808:	4a13      	ldr	r2, [pc, #76]	; (8000858 <EXTI0_IRQHandler+0xc0>)
 800080a:	4b13      	ldr	r3, [pc, #76]	; (8000858 <EXTI0_IRQHandler+0xc0>)
 800080c:	8c1b      	ldrh	r3, [r3, #32]
 800080e:	b29b      	uxth	r3, r3
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	b29b      	uxth	r3, r3
 8000816:	8413      	strh	r3, [r2, #32]
	TIM15->CCER |= TIM_CCER_CC2E; // Output state channel 2 enable
 8000818:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <EXTI0_IRQHandler+0xc0>)
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <EXTI0_IRQHandler+0xc0>)
 800081c:	8c1b      	ldrh	r3, [r3, #32]
 800081e:	b29b      	uxth	r3, r3
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	b29b      	uxth	r3, r3
 8000826:	8413      	strh	r3, [r2, #32]
	// Run timers to control stepper motor
	TIM3->CR1 |= TIM_CR1_CEN;
 8000828:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <EXTI0_IRQHandler+0xbc>)
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <EXTI0_IRQHandler+0xbc>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	b29b      	uxth	r3, r3
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	b29b      	uxth	r3, r3
 8000836:	8013      	strh	r3, [r2, #0]
	TIM15->CR1 |= TIM_CR1_CEN;
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <EXTI0_IRQHandler+0xc0>)
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <EXTI0_IRQHandler+0xc0>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	b29b      	uxth	r3, r3
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	b29b      	uxth	r3, r3
 8000846:	8013      	strh	r3, [r2, #0]
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	40010400 	.word	0x40010400
 8000854:	40000400 	.word	0x40000400
 8000858:	40014000 	.word	0x40014000

0800085c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler() {
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PR1; // Clear pending bit for EXTI3 line
 8000860:	4a2c      	ldr	r2, [pc, #176]	; (8000914 <EXTI1_IRQHandler+0xb8>)
 8000862:	4b2c      	ldr	r3, [pc, #176]	; (8000914 <EXTI1_IRQHandler+0xb8>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	f043 0302 	orr.w	r3, r3, #2
 800086a:	6153      	str	r3, [r2, #20]
	// Set counter-clockwise rotation direction
	TIM3->CCER &= ~TIM_CCER_CC1P; // Set low polarity
 800086c:	4a2a      	ldr	r2, [pc, #168]	; (8000918 <EXTI1_IRQHandler+0xbc>)
 800086e:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <EXTI1_IRQHandler+0xbc>)
 8000870:	8c1b      	ldrh	r3, [r3, #32]
 8000872:	b29b      	uxth	r3, r3
 8000874:	f023 0302 	bic.w	r3, r3, #2
 8000878:	b29b      	uxth	r3, r3
 800087a:	8413      	strh	r3, [r2, #32]
	TIM3->CCER &= ~TIM_CCER_CC2P; // Set low polarity
 800087c:	4a26      	ldr	r2, [pc, #152]	; (8000918 <EXTI1_IRQHandler+0xbc>)
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <EXTI1_IRQHandler+0xbc>)
 8000880:	8c1b      	ldrh	r3, [r3, #32]
 8000882:	b29b      	uxth	r3, r3
 8000884:	f023 0320 	bic.w	r3, r3, #32
 8000888:	b29b      	uxth	r3, r3
 800088a:	8413      	strh	r3, [r2, #32]
	TIM15->CCER |= TIM_CCER_CC1P; // Set high polarity
 800088c:	4a23      	ldr	r2, [pc, #140]	; (800091c <EXTI1_IRQHandler+0xc0>)
 800088e:	4b23      	ldr	r3, [pc, #140]	; (800091c <EXTI1_IRQHandler+0xc0>)
 8000890:	8c1b      	ldrh	r3, [r3, #32]
 8000892:	b29b      	uxth	r3, r3
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	b29b      	uxth	r3, r3
 800089a:	8413      	strh	r3, [r2, #32]
	TIM15->CCER |= TIM_CCER_CC2P; // Set high polarity
 800089c:	4a1f      	ldr	r2, [pc, #124]	; (800091c <EXTI1_IRQHandler+0xc0>)
 800089e:	4b1f      	ldr	r3, [pc, #124]	; (800091c <EXTI1_IRQHandler+0xc0>)
 80008a0:	8c1b      	ldrh	r3, [r3, #32]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	f043 0320 	orr.w	r3, r3, #32
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	8413      	strh	r3, [r2, #32]
	//TIM 3 out enable
	TIM3->CCER |= TIM_CCER_CC1E; // Output state channel 1 enable
 80008ac:	4a1a      	ldr	r2, [pc, #104]	; (8000918 <EXTI1_IRQHandler+0xbc>)
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <EXTI1_IRQHandler+0xbc>)
 80008b0:	8c1b      	ldrh	r3, [r3, #32]
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	8413      	strh	r3, [r2, #32]
	TIM3->CCER |= TIM_CCER_CC2E; // Output state channel 2 enable
 80008bc:	4a16      	ldr	r2, [pc, #88]	; (8000918 <EXTI1_IRQHandler+0xbc>)
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <EXTI1_IRQHandler+0xbc>)
 80008c0:	8c1b      	ldrh	r3, [r3, #32]
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	f043 0310 	orr.w	r3, r3, #16
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	8413      	strh	r3, [r2, #32]
	//TIM 15 out enable
	TIM15->CCER |= TIM_CCER_CC1E; // Output state channel 1 enable
 80008cc:	4a13      	ldr	r2, [pc, #76]	; (800091c <EXTI1_IRQHandler+0xc0>)
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <EXTI1_IRQHandler+0xc0>)
 80008d0:	8c1b      	ldrh	r3, [r3, #32]
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	b29b      	uxth	r3, r3
 80008da:	8413      	strh	r3, [r2, #32]
	TIM15->CCER |= TIM_CCER_CC2E; // Output state channel 2 enable
 80008dc:	4a0f      	ldr	r2, [pc, #60]	; (800091c <EXTI1_IRQHandler+0xc0>)
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <EXTI1_IRQHandler+0xc0>)
 80008e0:	8c1b      	ldrh	r3, [r3, #32]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	f043 0310 	orr.w	r3, r3, #16
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	8413      	strh	r3, [r2, #32]
	// Run timers to control stepper motor
	TIM3->CR1 |= TIM_CR1_CEN;
 80008ec:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <EXTI1_IRQHandler+0xbc>)
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <EXTI1_IRQHandler+0xbc>)
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	8013      	strh	r3, [r2, #0]
	TIM15->CR1 |= TIM_CR1_CEN;
 80008fc:	4a07      	ldr	r2, [pc, #28]	; (800091c <EXTI1_IRQHandler+0xc0>)
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <EXTI1_IRQHandler+0xc0>)
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	b29b      	uxth	r3, r3
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	b29b      	uxth	r3, r3
 800090a:	8013      	strh	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	40010400 	.word	0x40010400
 8000918:	40000400 	.word	0x40000400
 800091c:	40014000 	.word	0x40014000

08000920 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler() {
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
	EXTI->PR |= EXTI_PR_PR4; // Clear pending bit for EXTI4 line
 8000924:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <EXTI4_IRQHandler+0x78>)
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <EXTI4_IRQHandler+0x78>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	6153      	str	r3, [r2, #20]
	//TIM 3 out disable
	TIM3->CCER &= ~TIM_CCER_CC1E; // Output state channel 1 enable
 8000930:	4a1a      	ldr	r2, [pc, #104]	; (800099c <EXTI4_IRQHandler+0x7c>)
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <EXTI4_IRQHandler+0x7c>)
 8000934:	8c1b      	ldrh	r3, [r3, #32]
 8000936:	b29b      	uxth	r3, r3
 8000938:	f023 0301 	bic.w	r3, r3, #1
 800093c:	b29b      	uxth	r3, r3
 800093e:	8413      	strh	r3, [r2, #32]
	TIM3->CCER &= ~TIM_CCER_CC2E; // Output state channel 2 enable
 8000940:	4a16      	ldr	r2, [pc, #88]	; (800099c <EXTI4_IRQHandler+0x7c>)
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <EXTI4_IRQHandler+0x7c>)
 8000944:	8c1b      	ldrh	r3, [r3, #32]
 8000946:	b29b      	uxth	r3, r3
 8000948:	f023 0310 	bic.w	r3, r3, #16
 800094c:	b29b      	uxth	r3, r3
 800094e:	8413      	strh	r3, [r2, #32]
	//TIM 15 out disable
	TIM15->CCER &= ~TIM_CCER_CC1E; // Output state channel 1 enable
 8000950:	4a13      	ldr	r2, [pc, #76]	; (80009a0 <EXTI4_IRQHandler+0x80>)
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <EXTI4_IRQHandler+0x80>)
 8000954:	8c1b      	ldrh	r3, [r3, #32]
 8000956:	b29b      	uxth	r3, r3
 8000958:	f023 0301 	bic.w	r3, r3, #1
 800095c:	b29b      	uxth	r3, r3
 800095e:	8413      	strh	r3, [r2, #32]
	TIM15->CCER &= ~TIM_CCER_CC2E; // Output state channel 2 enable
 8000960:	4a0f      	ldr	r2, [pc, #60]	; (80009a0 <EXTI4_IRQHandler+0x80>)
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <EXTI4_IRQHandler+0x80>)
 8000964:	8c1b      	ldrh	r3, [r3, #32]
 8000966:	b29b      	uxth	r3, r3
 8000968:	f023 0310 	bic.w	r3, r3, #16
 800096c:	b29b      	uxth	r3, r3
 800096e:	8413      	strh	r3, [r2, #32]
	// Run timers to control stepper motor
	TIM3->CR1 &= ~TIM_CR1_CEN;
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <EXTI4_IRQHandler+0x7c>)
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <EXTI4_IRQHandler+0x7c>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	b29b      	uxth	r3, r3
 8000978:	f023 0301 	bic.w	r3, r3, #1
 800097c:	b29b      	uxth	r3, r3
 800097e:	8013      	strh	r3, [r2, #0]
	TIM15->CR1 &= ~TIM_CR1_CEN;
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <EXTI4_IRQHandler+0x80>)
 8000982:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <EXTI4_IRQHandler+0x80>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	b29b      	uxth	r3, r3
 8000988:	f023 0301 	bic.w	r3, r3, #1
 800098c:	b29b      	uxth	r3, r3
 800098e:	8013      	strh	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	40010400 	.word	0x40010400
 800099c:	40000400 	.word	0x40000400
 80009a0:	40014000 	.word	0x40014000

080009a4 <main>:
#include "init.h"
#include "interrupts.h"

int main(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	/* General initialization*/
	initComRCC();
 80009a8:	f7ff fc4a 	bl	8000240 <initComRCC>
	initGPIO();
 80009ac:	f7ff fcca 	bl	8000344 <initGPIO>
	initTIM3();
 80009b0:	f7ff fd72 	bl	8000498 <initTIM3>
	initTIM15();
 80009b4:	f7ff fe0e 	bl	80005d4 <initTIM15>
	initIRPT();
 80009b8:	f7ff feba 	bl	8000730 <initIRPT>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
 80009bc:	b662      	cpsie	i
	__enable_irq();

	while(1) {
 80009be:	e7fe      	b.n	80009be <main+0x1a>

080009c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009c6:	e003      	b.n	80009d0 <LoopCopyDataInit>

080009c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80009ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009ce:	3104      	adds	r1, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80009d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80009d8:	d3f6      	bcc.n	80009c8 <CopyDataInit>
	ldr	r2, =_sbss
 80009da:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80009dc:	e002      	b.n	80009e4 <LoopFillZerobss>

080009de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80009de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80009e0:	f842 3b04 	str.w	r3, [r2], #4

080009e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80009e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80009e8:	d3f9      	bcc.n	80009de <FillZerobss>
	
/* Call the clock system intitialization function.*/
  bl  SystemInit 
 80009ea:	f000 f837 	bl	8000a5c <SystemInit>
/* Call static constructors */
  bl __libc_init_array  
 80009ee:	f000 f8dd 	bl	8000bac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009f2:	f7ff ffd7 	bl	80009a4 <main>
	bx	lr
 80009f6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009f8:	20002000 	.word	0x20002000
	ldr	r3, =_sidata
 80009fc:	08000c14 	.word	0x08000c14
	ldr	r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a04:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000a08:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8000a0c:	2000001c 	.word	0x2000001c

08000a10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC1_IRQHandler>

08000a12 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a36 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr

08000a42 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
	...

08000a5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a60:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <SystemInit+0x64>)
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <SystemInit+0x64>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000a6c:	4914      	ldr	r1, [pc, #80]	; (8000ac0 <SystemInit+0x64>)
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <SystemInit+0x64>)
 8000a70:	685a      	ldr	r2, [r3, #4]
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <SystemInit+0x68>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a78:	4a11      	ldr	r2, [pc, #68]	; (8000ac0 <SystemInit+0x64>)
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <SystemInit+0x64>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a86:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <SystemInit+0x64>)
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <SystemInit+0x64>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a92:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000a94:	4a0a      	ldr	r2, [pc, #40]	; (8000ac0 <SystemInit+0x64>)
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <SystemInit+0x64>)
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a9e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <SystemInit+0x64>)
 8000aa2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000aa6:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <SystemInit+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000aae:	f000 f80d 	bl	8000acc <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <SystemInit+0x6c>)
 8000ab4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ab8:	609a      	str	r2, [r3, #8]
#endif 
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	f8ff0000 	.word	0xf8ff0000
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
#ifdef SYSCLK_FREQ_HSE
  SetSysClockToHSE();
#elif defined SYSCLK_FREQ_24MHz
  SetSysClockTo24();
 8000ad0:	f000 f802 	bl	8000ad8 <SetSysClockTo24>
  SetSysClockTo72();
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <SetSysClockTo24>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo24(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000ae6:	4a30      	ldr	r2, [pc, #192]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000af0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000af2:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3301      	adds	r3, #1
 8000b00:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d103      	bne.n	8000b10 <SetSysClockTo24+0x38>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000b0e:	d1f0      	bne.n	8000af2 <SetSysClockTo24+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000b10:	4b25      	ldr	r3, [pc, #148]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <SetSysClockTo24+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	e001      	b.n	8000b26 <SetSysClockTo24+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d137      	bne.n	8000b9c <SetSysClockTo24+0xc4>
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
#endif
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000b2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000b34:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b36:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000b3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	6053      	str	r3, [r2, #4]
    while((RCC->CR & RCC_CR_PLL2RDY) == 0)
    {
    }   
#elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
    /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8000b44:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000b4e:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLLMULL6);
 8000b50:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f443 1398 	orr.w	r3, r3, #1245184	; 0x130000
 8000b5a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000b5c:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b5e:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b66:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000b68:	bf00      	nop
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d0f9      	beq.n	8000b6a <SetSysClockTo24+0x92>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000b76:	4a0c      	ldr	r2, [pc, #48]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f023 0303 	bic.w	r3, r3, #3
 8000b80:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000b82:	4a09      	ldr	r2, [pc, #36]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000b8e:	bf00      	nop
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SetSysClockTo24+0xd0>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 030c 	and.w	r3, r3, #12
 8000b98:	2b08      	cmp	r3, #8
 8000b9a:	d1f9      	bne.n	8000b90 <SetSysClockTo24+0xb8>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  } 
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000

08000bac <__libc_init_array>:
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	2500      	movs	r5, #0
 8000bb0:	4e0c      	ldr	r6, [pc, #48]	; (8000be4 <__libc_init_array+0x38>)
 8000bb2:	4c0d      	ldr	r4, [pc, #52]	; (8000be8 <__libc_init_array+0x3c>)
 8000bb4:	1ba4      	subs	r4, r4, r6
 8000bb6:	10a4      	asrs	r4, r4, #2
 8000bb8:	42a5      	cmp	r5, r4
 8000bba:	d109      	bne.n	8000bd0 <__libc_init_array+0x24>
 8000bbc:	f000 f81a 	bl	8000bf4 <_init>
 8000bc0:	2500      	movs	r5, #0
 8000bc2:	4e0a      	ldr	r6, [pc, #40]	; (8000bec <__libc_init_array+0x40>)
 8000bc4:	4c0a      	ldr	r4, [pc, #40]	; (8000bf0 <__libc_init_array+0x44>)
 8000bc6:	1ba4      	subs	r4, r4, r6
 8000bc8:	10a4      	asrs	r4, r4, #2
 8000bca:	42a5      	cmp	r5, r4
 8000bcc:	d105      	bne.n	8000bda <__libc_init_array+0x2e>
 8000bce:	bd70      	pop	{r4, r5, r6, pc}
 8000bd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bd4:	4798      	blx	r3
 8000bd6:	3501      	adds	r5, #1
 8000bd8:	e7ee      	b.n	8000bb8 <__libc_init_array+0xc>
 8000bda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bde:	4798      	blx	r3
 8000be0:	3501      	adds	r5, #1
 8000be2:	e7f2      	b.n	8000bca <__libc_init_array+0x1e>
 8000be4:	08000c0c 	.word	0x08000c0c
 8000be8:	08000c0c 	.word	0x08000c0c
 8000bec:	08000c0c 	.word	0x08000c0c
 8000bf0:	08000c10 	.word	0x08000c10

08000bf4 <_init>:
 8000bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf6:	bf00      	nop
 8000bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bfa:	bc08      	pop	{r3}
 8000bfc:	469e      	mov	lr, r3
 8000bfe:	4770      	bx	lr

08000c00 <_fini>:
 8000c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c02:	bf00      	nop
 8000c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c06:	bc08      	pop	{r3}
 8000c08:	469e      	mov	lr, r3
 8000c0a:	4770      	bx	lr
